主题阅读，有关HTTP协议的一些东西：主要找到了五本书
图解TCP_IP
用TCP_IP进行网际互联（第一卷）
TCP_IP详解卷一
HTTP权威指南
UNIX网络编程卷1：套接字联网API

首先第一本，图解那本，基本上就是简单介绍了一下，http协议工作的基本流程
在自己的主机上有一个浏览器，浏览器有一个地址栏，输入里面一些东西，在下面就会有页面出来
这一端的事情叫做客户端，在网页内容存储的地方，那一边有一个服务器，web服务器，那是服务器端
这两端之间的通信就是使用http协议。
整个通讯之间有几次请求和回复，还有在两端的一些程序支持，验证是不是输入正确等等，可以根据提交的内容返回网页等等。
ajax网页的部分动态刷新等等。
主要有什么js，cookie的概念。讲得很粗略，没有深入，大概了解。

第二本，经典之作，网络双壁的神书，篇幅也是很长，用TCP_IP进行网际互联（第一卷）
其中有一章的内容来讲http，这本书真是神，从硬件层开始讲起，一点点走上去链路层，ip，tcp，等等
到http，ftp等等应用层的时候，已经很后面了。

这里可以仔细看一下，使用HTTP协议本身构建的大厦成品叫做万维网，WWW，World Wide Web。
Internet是信息的主干道，在刚刚发展起来的时候，FTP占大头，三分之一的流量。
九十年代的之后，web开始飞速发展，新世纪之后，web已经几乎一统江山了。

web的主要模型就是两块，客户端和服务器，BS。web页本身是一个大文档，HTML文档。

怎么在服务器端找到这个web页。
URL，统一资源定位器，Uniform Resource Locator，URL。http的格式
http://hostname[:port]/path[;parameter][?query]

超文本传输协议，HyperText Transfer Protocol，HTTP，特点什么可以说说
1. 这是个应用层的协议，基于TCP连接的，但是没有可靠性和重传什么的东西
2. 请求，响应，一般来讲tcp连接一旦建立，那么浏览器就需要向响应端发送请求
3. 无状态，自己搞定自己的事情，http请求不会在服务器上留下什么历史，不保留记录
4. 双向传输，两端互相传数据，提交数据什么的
5. 协商，两方制定一些传输的细节，字符集，最大的传输能力什么的
6. 高速缓存，浏览器保存web页的副本，本地缓存
7. 中介，也就是代理服务器，可以缓存网页，处理请求什么的

GET请求的东西
这个请求就是一行文本，打头的是关键字GET，之后是URL和http版本号。
举个例子
GET http://www.cs.purdue.edu/people/comer/HTTP/1.1
tcp连接形成之后，就可以省略主机名了

错误消息的返回
错误消息也是在有效的html中生成，是一个网页之类的


持久连接和长度
持久连接里面的http传输，先发送数据的长度，之后再发送数据，另一个方法是约定一个标示符作为数据结束的标记，但是有时候传输的数据里面包含图片，这个数据是任意的组合，有可能包含结束标示符，不好不好。

数据长度和程序输出
Common Gateway Interface，CGI，公共网关接口，这样提前就不知道数据的长度。
解决方式是服务器在数据传输之后，通知客户端关闭tcp连接。

长度编码和首部
长度信息的表示方法，基本格式，822，MIME扩展格式
822报文，每个http传送包含一个首部，一个空行，还有数据。首部包含关键字，冒号和信息。
Content-Length 数据大小
ContentType 数据类型
Content_Encoding数据编码
Content-Language 数据语言


协商
商量商量一些东西，比如数据的格式，图片jpg行不行，语言要什么的。
类型，服务器驱动，代理驱动（浏览器驱动）：谁点菜的区别，一个是浏览器说我要什么什么，服务器尽量满足。
一个是服务器说，我有什么什么，浏览器看着办。

条件请求
浏览器制定一个条件，要是服务器没有满足条件的数据，就不要送了。


代理服务器的支持
整一个浏览器和服务器之间的代理，第一次访问的时候就把副本保存在代理里面，第二次访问那就不用走网络了，本地代理里面取出来用就好。

高速缓存
着重说的是存储，着眼点是，web内容应该在缓存之中保留多长时间，

到这里这本神书的直接与HTTP相关的内容结束了，之后推荐了一大波RFC文档
（那是太厉害了，看着RFC，喝着小酒，吃着火锅，突然就被麻匪给劫了。）

下面第三本是另一本神书，斯蒂文斯的tcpip详解，这是绕不过去的书，但是暂时我只是关注http的部分，很遗憾，卷一里面www的内容也是很少，相信跟这个书写作的年份有关，虽然有名，但是毕竟年代在那里了，因特网的发展太快了。虽然tcpip不会过时，但是也很难顾及其他的太多东西。
提到的内容也就是一句，万维网

万维网使用一个称为超文本的工具，使得我们可以浏览一个大的 /全球范围的服务和文档。
信息和关键字一起显示，不过关键字被突出显示 。我们可以通过选择关键字得到更多的信
息。
为了访问W W W，请使用Te l n e t登录i n f o . c e r n . c h站点。
关键字的意思大概就是超链接吧。

有种找错书的感觉，毕竟上面两本神书都是主要接扫tcpip这个下一层的协议的，www和http的内容少一点不奇怪。

但是很明显，http这种应用层协议，要想理解透彻，就必须熟悉下一层的tcpip协议，再往下的硬件层可能没有必要太清楚。

下一本，第四本书，依旧是神书，UNIX网络编程
斯蒂文斯的神作，这种书一般是把来膜拜的，年代久远，很多事情可能现在看来很难理解，但是又很多东西是经久不衰，亘古不变的东西， 所谓经典，就像德沃夏克的第九交响曲，今天听来，也是非常非常好听，一点都不过时。可能优秀的作品慢慢就是历练出来。

全部是套接字编程的内容，比较底层，比较厉害，有待学习。完全没有www和http的内容，下一本。



最后一本，这本是重头戏，看书名就知道是http为重点的介绍了，http权威指南

这是oreilly出品的动物书，封面是一只松鼠还是老鼠来着，反正是啮齿类，不知道是有什么象征比喻的关系没有。

据说http本身是简单的，但是这本书却有700多页，其中还讲述了web架构的知识。

21个章节，逻辑部分被分为5个
一，HTTP：Web的基础
二，HTTP结构
三，识别，认证与安全
四，实体，编码和国际化
五，内容发布与分发

最后还有一个附录

第一部分说的是web的基础构建和HTTP核心技术
有些概念要玲玲清除
HTTP，URL，URN什么的，报文传送的过程

第二部分有一些web系统的构造模块
HTTP服务器，代理，缓存，网关，

第三部分是安全性和识别的东西，

第四部分是http报文的主题和web标准，
http内容的结构，

第五部分是发布东西

附录里面是URI，响应代码，首部字段的参考，MIME类型什么？，

第一章 HTTP的基础

web和护短和服务器是如何通信的？
表示web内容的资源来自何方？
web事务是如何工作的？
HTTP通信使用的报文格式是什么样子的？
底层的TCP网络传输。
不同的HTTP协议变体。
internet上安装的大量HTTP架构组件中的一部分。

数以亿级的资源每天在internet上飞来飞去，各种类型的文件和数据。
HTTP使用的是可靠的数据传输协议，数据不会有事情，只要关心好传输什么就可以了。

web客户端和服务器
web服务器使用http协议，也就叫做http服务器
客户端会想服务器发送http请求，服务器会在http响应中回送所请求的数据。

web资源
简单地就是服务器里面的静态文件，也可以是根据程序生成的动态内容。

媒体类型
MIME Multipurpose Internet Mail Extension 对象数据的附加格式
这是一种文本标记，表示主要的对象类型和特定的子类型，中间斜杠分割
HTML格式就是text/html
普通的文本就是text/plain
jpeg文件就是image/jpeg
gif文件的标记是image/gif
apple的quicktime是video/quicktime
微软ppt是application/vnd.ms-powerpoint
常见的mime类型有数百个

在传输的时候怎么表示，就是content-Type：MIME类型

MIME常见的不常见的有很多

URL，Uniform Resource Identifier就是web资源的名字，是全世界唯一的标识
给定了URI，http就可以访问出对象，有两种形式，成为URL和URN。

URL，统一资源定位符，指定服务器的某一个资源的特定位置，精确说明一个固定的位置获取资源。
URL的组成有标准的格式，分为三个部分
1. 称为方案，Scheme，说明访问所使用的协议类型。通常就是http：//
2. 第二个部分是因特网地址，比如www点什么什么点com
3. 剩下的部分是制定资源的位置/什么/什么点什么之类的

URN，Uniform Resource Name，统一资源名，作为特定内容的唯一名称使用，与资源所在地没有关系。
这个东西比较先进，但是还在试验阶段，没有大范围采用，关键是需要一个解析资源位置的支撑架构。

事务
事务处理，一条http事务的组成，一条请求加上一个响应结果。用http报文（message）格式化数据来完成。
举一个例子：
客户端发出一条报文
GET /specials/saw-blade.gif HTTP/1.0
Host: www.joes-hardware.com

之后服务器会回应一个结果，也是http报文
HTTP/1.0 200 OK
Content-type: image/gif
Content-length: 8572
图片数据

方法，
htt支持集中请求命令，也就是http方法（method）。这个方法告诉server执行什么操作
五个常见的方法，
GET	从服务器向客户端发送指定资源
PUT	将来自客户端的数据存储到指定资源
DELETE	从服务器中删除指定资源
POST	将客户端数据发送到一个服务器网关应用程序
HEAD	仅仅是发送指定资源响应中的http首部

状态码
http报文返回时候会携带状态码，三位数字，显示一些意思
200 OK
302 重定向
404 没找到

web页面中可以包含多个对象
包含丰富图片的web页面，需要一连串的多个http事务。可能先整一个大概的页面，中间的小细节，图片什么的用单独的http事务来请求。
也可能资源位于不同的地方，web不是单个资源，是一个资源的集合。嵌入式资源

报文
报文是一行行简单的字符串。都是纯文本，不是二进制。
请求报文 request message，是从客户端发到服务器的
响应报文 response message 是服务器返回给客户端的

一个报文分为三个部分，
起始行
第一行就是，请求里面是说明要做什么，响应里面是说出现了什么

首部字段
貌似是像一个字典，一个名字一个值，以一行空行来结束

主体
可选，包含所有类型的数据，任意类型，也可以是文本。

1.6 连接
HTTP报文是需要传输的内容，那么怎么传输，TCP怎么把报文传输的。

TCP/IP
http是在应用层的，不用关心网络的事情，都交给下面了。
TCP可以做到
1. 数据传输没有差错
2. 数据会按照顺序到达
3. 在任意时刻用任何尺寸吧数据发送。

连接，IP地址和端口号
连接，在发送报文之前，先要用IP协议，在b和s之间建立tcp连接
连接需要知道服务器的ip地址，还有这个地址的及其上的软件的端口号。

http服务默认的端口号是80，所以忽略也OK

基本的步骤就是
1. 浏览器从URL中解析出server的主机名字
2. 主机名转换成IP地址，这里用到DNS服务
3. 端口号解析出来，如果指定了端口号的话
4. 浏览器建立一条与web服务器的tcp连接
5. 浏览器向服务器发送请求报文
6. server回应响应报文
7. 关闭连接，显示文档

使用telnet
telent陈旭可以将键盘连接到某个目标TCP端口，将端口输出回送到显示屏上。telnet用于远程终端服务，可以连接所有tcp服务器，也包括httpserver。
telnet NetCat，操纵基于UDP和TCP的流量

HTTP协议版本
要尽量处理各种不同的版本
现在还在使用的版本（现在可以公开的情报）
0.9，只支持get方法，，不支持多媒体
1.0，最佳实践的集合，
1.0+ 非官方的事实性标准
1.1 当前使用的版本，删了点，加了点，修补了点
HTTP-NG，2.0 还没来，不管

1.8 web的结构组件
除了b和s，还有一些比价重要的应用程序。
代理， 在B和S之间的HTTP中间实体
缓存	HTTP的仓库，在客户端更近的地方保存副本
网关	连接其他应用程序的特殊WEB服务器
隧道	盲转发
Agent代理	发起自动请求的半智能web客户端

代理
用处，web安全，应用集成，性能优化
接受所有B的请求，转发给S，代表用户访问
也就是进来出去，都是要从代理这里走，进来出去都要检查

缓存
web cache或者proxy cache，是特殊的http代理服务器，对于经常使用的文档保存本地副本。

网关（gateway）
特殊服务器，作为其他服务器的中间实体。
将http流量转换成其他协议。假装成是资源服务器，接受请求，然后转发给服务器，对客户端透明。
不同协议之间的转换。

隧道（tunnel）
盲转发，加密传输什么的，不是很明白

Agent代理
代表用户发起http请求的客户端程序，目前只有浏览器。还有其他类型。
网络蜘蛛和web机器人，自己在web上闲逛。爬虫


URL和资源

世界上有很多很多的东西，各式各样，有也是必须有一个标准化的，公认的，大家都认可的名字来描述东西。
人有人名，有电话，商品有条形码，地方有地址，房子有门牌号，路有路名。

电子世界，URL就是大家都知道的名字。
下面说的东西是
1. URL的语法，组成的结构和含义
2. URL快捷方式，相对URL和自动扩展的URL
3. URL编码和字符规则
4. 支持各种internet的常见url方案
5. url的未来urn。

浏览器里面制定一个url，浏览器就会生成报文来访问获取资源了。
URL是URI的子集。

之前说过的url三部分就是，第一个是方案，咋做的事情，第二个是服务器的位置，主机名，说明在何处，第三个是资源路径，说明是哪一个资源。

url的语法
方案部分不一定是http，也可以是ftp，smtp等等，随着方案的不同，url的语法也不一样。
也不是完全不一样，大部分是相同的。
首先是URL的通用格式，有九个部分组成
<scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>
第一个方案，默认是没有的，表示访问服务器用的是什么协议
第二个是用户，一般是匿名的，需要的时候是说用户名
第三个是密码，用户密码嘛，默认是email地址？？？？
第四个主机，域名或者IP地址，
第五个是端口，表示资源服务器正在监听的端口号，一般有各自默认的端口号，http是80
第六个是路径，资源本地名称，方案不同，路径语法不同
第七个是参数，是名字/值的对，分号分割
第八个是查拳，这个东西说不定会激活应用程序，数据库什么的，？之后的东西
第九个是片段，不会发给服务器，在客户端内部用

方案，用什么协议
规定的是如何访问指定资源的主要标识符
方案的名字大小写不敏感

主机和端口
主机名，IP地址，不废话，
端口是什么，表示了服务器正在坚挺的网络端口，人家准备好了，等着你呢

用户名和密码
ftp一般要求的，匿名用户会自动插入anonymous用户名，

路径
这个路径定位的是资源在服务器的什么地方，有点像unix的系统文件树。
每一个路径段（斜线中间的东西叫做路径段，有点像目录的概念）都有自己的参数组件

参数
很多协议来说，这么点信息是不够的，还要更多，这个还蛮奇怪的

查询字符串
问好后面的字符串，组件之间使用&符号链接

片段
有些东西，还是要进一步划分的，比如网页是一本书，想要请求定位到某个部分。也就是资源的一个片段
这个是客户端来处理的

URL的快捷方式
不用完整的url，可以便捷省略的url来访问资源

相对url
在基础url的概念基础上，推导出绝对url。


自动扩展URL
url不完整，浏览器会自动扩展
主机名扩展
历史扩展

各种令人头疼的字符
要兼容各种的协议，所以需要用的字符就要最安全的那种。

URL字符集，通用字母表和编码规则
转义序列这种东西，可以用ASCII的有限字符对任意字符值和数据进行编码。

编码机制
表示不安全的字符，百分号打头，之后是两个表示ascii码的十六进制数字
所谓安全不安全，就是在很多协议里面是不是可以用，字母数字应该是都能用，有些不能用的字符，就用转义编码来表示

~ %7E
空格 %20
% %25

字符限制
有一些保留的字符，来保证不使用
%百分号，转义字符
/	路径组件的分割
.	
.. 	两个都是在路径里面用
#	分段定界
？	查询字符串定界
;	参数定界
：	方案，用户密码，主机端口的分界
$,+	保留，反正不能用
@&=	
{}|\^~[]'
<>"	html里面不是要用么，所以保留
十六进制数不能用，不是可打印字符

这些东西不是说不能用，而是最好不要用，要规范，这样不同程序之间就不会出大问题

方案，scheme的世界，以及常见的格式
http，这个都了解，端口省略，主机，查询一般就是
https，用了ssl的http，多了一个path

mailto，后面是加上一个邮件地址，mailto:joe@joe-hardware.com

ftp，文件传输协议，

rtsp，rtspu，实时流传输协议，u是udp的意思

file，指定主机，直接访问

news，新闻服务

telnet，访问交互式业务，

未来，也就是现在了吧

URL说的是资源的位置，也就是说，资源如果已经不再这个位子上，那就找不到了。
相对来讲，要是资源是有唯一名称的话，不论是在web的何处，都可以定位，那就爽了吧。
URN，统一资源名。
永久统一资源定位符（persistent uniform resource locators）PURL。用url来实现urn。
然并卵，url依然会通知很长一段时间。
因为urn的迁移要做的事情太多，而且大家也已经学会了url

第三章 HTTP报文

如何创建一个报文，如何理解报文等等事情。
报文怎么流动
报文的组成（起始行，首部和实体的主体）
请求报文和响应报文
请求报文的各种方法
响应报文的返回状态码
http首部干啥的

报文流
数据块和元信息，流入流出，上游下游
报文流入服务器，完成工作之后，流回到客户端

上下游流动
对于发送者，就是上游，接受者就是下游
请求报文，客户端是上游，流向下游的服务器
响应报文，服务器是上游，流向下游的客户端

报文的组成
简单的格式化数据块，
1. 对报文进行描述的起始行（start line）
2. 包含属性的首部（header）块
3. 可选的数据主体（body）部分

起始行和首部是行来分割的ASCII文本，行终止符包含一个回车和一个换行，可写作CRLF
首部之中给出一些与主体有关的信息，Content-type说明主体是什么，Content-length说明主体多大

请求和响应报文的基本格式是相似的，只是起始行有些许不同

请求报文的格式
<方法> <请求URL> <http版本>
<首部>

<实体的主体部分>
响应报文的格式
<HTTP版本> <状态码> <理由之类的>
<首部>

<数据主体>

起始行
请求行，也就是请求报文的起始行
响应行，响应报文的起始行

方法，
get head，post，put，trace，options，delete

状态码
1打头，信息提示
2打头，成功
3**， 重定向
4**， 客户端错误
5**， 服务器端错误

零个或者多个首部字段
Content-Length：19

HTTP规范定义的首部字段，分成几类
通用首部，请求和响应里面都可以出现
请求首部，描述有关请求的信息
响应首部，描述有关响应的信息
实体首部，描述主体或者资源自身
扩展首部，规范里面没定义的

实例
Date：Tue，3 Oct 1997 02:16:03 GMT 服务器响应的产生日期
Content-length： 15040 实体的主体部分包含了15040字节的数据
Content-type: image/gif 表示实体的主体是一张gif
Accept： image/gif， image/jpeg,text/html 客户端可以接受的东西


方法
安全方法，get和head是安全的，都不会产生什么动作
post就会产生动作

GET方法
请求服务器发送某个资源给我，get一个

HEAD和get是类似的，但是只会返回对应资源的首部，不返回主体部分。在没有获取资源的情况下，对首部信息进行检查
判断资源的类型，查看状态码可以判断资源是不是存在，返生就是看首部，知天下事。

HEAD一个资源和get一个资源返回的首部应该是一样的。

PUT方法和GET相反，是往服务器写入资源。牵涉到服务器内容的修改，所以很多时候需要密码登陆。

POST是向服务器输入数据，PUT是往服务器存储数据。提交表单的事情一般。

TRACE，跟踪这一路返回的变化，环回诊断，在主体里面包含原始的请求报文，

OPTIONS，方法请求web服务器告知支持什么功能。支持什么方法，

DELETE，请求删除URL位置的资源。

扩展方法
WebDAV HTTP扩展
LOCK，锁定某一个资源，防止别人改动
MKCOL，允许用户创建资源
COPY， 复制资源
MOVE， 移动

成功状态码
状态码什么的可以再遇到的时候在搞定，应该不要紧

首部
通用首部，大家都是成人的首部，比如date，说明报文创建的时间
请求首部，请求报文特有的，比如Accept表示希望接受的类型
响应首部：回应一些信息的用处，比如表示自己的服务器类型
Server：Tiki-Hut/1.0

实体首部：说明实体的首部，说明数据类型什么的。
Content-Type:text/html；charsetiso-latin-1
扩展首部：不是规范的，意义不明

通用首部的信息性首部
Connection，
Date
MIME-Version
Trailer
Transfer-Encoding
Update
Via

通用首部，缓存首部
Cache-Control
Pragma

请求首部是意思只在请求报文里面有意义的首部
信息性的，表示请求报文信息的首部
Client-IP
From 客户端用户的email地址
Host 服务器的主机名和端口号
Referer 
UA-Color 客户端显示颜色信息
UA-CPU 客户端芯片信息
UA-Disp 
UA-OS
UA-Pixels
User-Agent 发起请求的应用程序名称

Accept首部
请求里面表示客户端的能力，喜好，和厌恶的东西
Accept 告诉服务器能够发送哪些类型
Accept-Charset 字符集能够的
Accept-Encoding 编码方式
Accept-Language 语言
TE 扩展传输编码

条件请求首部
帮请求加上一些限制。比如在请求被完成响应之前，确保某个条件成立才执行。
Expect 		期望服务器的行为
If-Match	如果是标记和当前的实体标记相匹配，获取文档
If-Modifed-Since
If-None-Match
If-Range
If-Unmodified-Since
Range

请求报文首部的安全请求首部
Authorization 对客户端进行认证的数据
Cookie
Cookie2

代理，请求首部
Max-Forward
Proxy-Authorization
Proxy-Connection


响应首部
谁在发送响应，响应者的功能，与响应相关的特殊指令
Age
Public
Retry-After
Server
Title
Warning

协商首部，
Accept-Range 	服务器可以接受的类型范围，好商量，几个选项
Vary		

响应首部，安全类
Proxy-Authenticate
Set-Cookie
Set-Cookie2
WWW-Authenticate

实体首部
描述http报文的负荷
在请求和响应都会有实体的可能，所以这些首部都可能会有
实体信息性首部
Allow 		可以对实体执行的请求方法
Location	

内容首部是与实体内容相关的特定信息，说明类型，尺寸和需要的信息。
Content-Base 		解析主体中的相对URL时候使用的基础URL
Content-Encoding 	
Content-Language
Content-Length
Content-Location
Content-MD5
Content-Range
Content-Type



第四章 连接管理
规范讲的是报文相关，连接说的不多。
TCP连接是怎么被http用的
TCP连接的延迟，瓶颈，现存障碍
HTTP的优化，（并行连接，保活，管道化连接，pipeline）
连接管理十件事必知必会，这个必考

TCP连接
TCP是可靠的数据管道，交给TCP从此不用愁
TCP是用ip来小块数据传送的，
协议栈就是HTTP下面是TCP兜着，TCP下面是IP兜着。
HTTPS就是在HTTP和TCP之间差了一个TLS或者SSL的加密层

这个传输的过程即使一层包一层，各个协议把上一层的东西当做数据，自己打包一层，交给下一层，下一层接着打包，
传导位置之后，一层层扒皮，最后最后搞定。

保持TCP连接正确运行
一台计算机上，可以有多条TCP连接处于运行状态。通过端口号来分别
IP地址相当于计算机的总机，端口号相当于分机。
一个tcp标志，源ip，源端口，目标ip，目标端口
这样这个tcp就是唯一的。

用TCP套接字编程
TCP 编程接口
套接字API，socket

对TCP连接进行编程，常见的套接字接口函数
s = socket(<parameters>)		创建一个新的，未命名的，未关联的套接字，活生生热乎乎的
bind(s, <local IP:port>)		向套接字赋予一个本地端口号和接口
connect(s, <remote IP:port>)		创建一条连接本地套接字与远程主机和端口的连接
listen(s, ...)				标识一个本地套接字，让这个套接字可以合法接受连接
s2 = accept(s)		等待某人建立一条到本地端口的连接
n = read(s, buffer, n)		尝试从套接字向缓冲区读取n个字节
n = write(s, buffer, n)		尝试从缓冲区向套接字写入n个字节
close(s)		完全关闭tcp连接
shutdown(s, <side>)	只是关闭tcp连接的输入或者输出端
getsockopt(s, ...)	读取某个内部套接字配置选项的值
setsockopt(s, ...)	修改某个背部套接字配置选项的值

HTTP性能基本上就是依赖于TCP性能，在HTTP的串行处理过程里，DNS域名解析或许会花很久

TCP的性能优化可能暂时不是我这种想要学习HTTP协议的读者向深入的内容。
看是将来一定看TCP的但是现在先放一下，看看后面有什么有意思的。

Connection首部
这一段真的云里雾里，connection什么东西，close表示发完这一波关掉。。。

串行事务处理时延
一条线上走，容易堵车啊

并行连接，多条TCP连接
持久连接，重用TCP连接，http用完不关闭，后一个接着用
管道化连接，共享TCP连接发起并发的http请求
复用的连接
交替传送请求和响应报文

并行连接
持久性连接，
并行和持久的结合


###第五章 Web服务器
Web服务器有各种形状各种尺寸，不尽相同。也是说的是Web服务器软件和可以返回响应报文的机器。
10行perl脚本就能做一个web？太夸张了

web服务器的实现
标准计算机上的通用软件web服务器
也有专门的web服务器设备，安装配置好的机架之类的东西
嵌入式的web服务器

标准的计算机上，有网络功能的都可以，Apache之类的额软件，接班都有。
Apache是有百分之六十都是，剩下的包分之三十是微软，还有百分之三是iPlanet，

web服务器硬件
一台专用的计算机吧
大佬们的解决方案之类的

嵌入式的web服务器
消费类电子产品的小型web服务器，可以用浏览器接口管理设备

最小的perl web服务器
做的事情就是假扮成一台真正的web服务器，对于请求报文返回响应
指定端口，
建立连接
返回报文

麻雀虽小，五脏俱全，这个小web服务器和正宗的web服务器也有共同的地方

1. 建立连接，接受一个客户端连接
2. 接受请求，从网络中读物一条http请求报文
3. 处理请求，对请求报文进行解释，采取行动
4. 访问资源，
5. 构建响应
6. 发送响应
7. 记录事务处理过程

1. 建立连接的过程中，web可以随时关闭连接，客户端地址认证，身份识别什么的
客户端主机名识别，反向DNS

2. 接受请求报文
解析报文的内容，
报文到了之后，可能会被服务器用内部的数据结构来表示
web服务器会不停的轮询端口，看看有没有新的请求，处理请求的方式也有不一样
单线程web服务器，一次处理一个，知道完成
多进程及多线程web服务器
复用I/O的服务器
复用的多线程web服务器

3. 处理请求，后面要大讲特讲

4. 对资源的映射和访问
报文中的URI，要映射成适当的内容或者内容生成器

docroot
根目录，document root，这样子uri会附在根目录后面，这就是内容的位置，最简单的映射

5. 构建响应
响应主体，
mime类型
文件扩展名，类型相关

6.发送响应

7.记录日志

第六章 代理
web的中间实体
代理。既是web服务器，又是web客户端。

为什么使用代理
绿坝，儿童过滤。
文档访问机制，不让上网盘什么的

web机器人，爬虫，蜘蛛，蠕虫


