<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZZJ</title>
    <description></description>
    <link>http://zhangzj.github.io/</link>
    <atom:link href="http://zhangzj.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 Nov 2016 17:20:14 +0800</pubDate>
    <lastBuildDate>Thu, 03 Nov 2016 17:20:14 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>编程书籍列表</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;如果有人让你推荐编程技术书，拉出这个列表&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;计算机系统与网络&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;编程通用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;算法与数据结构&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;职业修炼与规划&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;大师访谈&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;架构/性能&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web&quot; id=&quot;markdown-toc-web&quot;&gt;Web前端&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#java&quot; id=&quot;markdown-toc-java&quot;&gt;Java开发&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#net&quot; id=&quot;markdown-toc-net&quot;&gt;.NET&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#python&quot; id=&quot;markdown-toc-python&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#android&quot; id=&quot;markdown-toc-android&quot;&gt;Android&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ios&quot; id=&quot;markdown-toc-ios&quot;&gt;iOS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#php&quot; id=&quot;markdown-toc-php&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#c&quot; id=&quot;markdown-toc-c&quot;&gt;C语言&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#c-1&quot; id=&quot;markdown-toc-c-1&quot;&gt;C++&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;机器学习和数据挖掘&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;数据库&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;项目与团队&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;求职面试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;编程之外&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;如果有人让你推荐编程技术书，拉出这个列表&lt;/h3&gt;

&lt;p&gt;列表来自伯乐在线的专题书籍，&lt;a href=&quot;http://blog.jobbole.com/106093/&quot;&gt;书籍列表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个列表包括了 100 多本经典技术书籍，涵盖：计算机系统与网络、系统架构、算法与数据结构、前端开发、后端开发、移动开发、数据库、测试、项目与团队、程序员职业修炼、求职面试 和 编程相关的经典书籍。&lt;/p&gt;

&lt;p&gt;还有伯乐在线&lt;a href=&quot;http://blog.jobbole.com/tag/book/&quot;&gt;书籍推荐专栏&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github上对于这个书单有一个对应的awesome列表项目[awesome-programming-books]](https://github.com/jobbole/awesome-programming-books)&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;计算机系统与网络&lt;/h4&gt;

&lt;p&gt;《图灵的秘密》
《计算机系统概论》
《深入理解Linux内核》
《深入Linux内核架构》
《TCP/IP详解 卷1：协议》
《Linux系统编程（第2版）》
《Linux内核设计与实现（第3版）》
《深入理解计算机系统（原书第2版）》
《计算机程序的构造和解释（原书第2版）》
《鸟哥的Linux私房菜（基础学习篇 第三版）》
《编码：隐匿在计算机软硬件背后的语言》
《性能之颠：洞悉系统、企业与云计算》
《UNIX网络编程 卷1：套接字联网API（第3版）》
《UNIX网络编程 卷2：进程间通信》
《Windows核心编程(第5版)》
《WireShark网络分析就这么简单》&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;编程通用&lt;/h4&gt;

&lt;p&gt;《编程原本》
《代码大全》
《UNIX编程艺术》
《代码整洁之道》
《编程珠玑（续）》
《编程珠玑（第2版）》
《软件调试的艺术》
《修改代码的艺术》
《编程语言实现模式》
《编写可读代码的艺术》
《程序设计方法（中文版）》
《解析极限编程：拥抱变化》
《精通正则表达式（第3版）》
《现代编译原理 : C语言描述》
《编译原理 : 原理、技术与工具》
《重构：改善既有代码的设计》
《七周七语言：理解多种编程范型》
《调试九法：软硬件错误的排查之道》
《程序设计语言：实践之路（第3版）》
《计算的本质：深入剖析程序和计算机》
《设计模式 : 可复用面向对象软件的基础》&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;算法与数据结构&lt;/h4&gt;

&lt;p&gt;《算法（英文版 第4版）》
《算法导论（原书第2版）》
《Python算法教程（第2版）》
《算法设计与分析基础（第3版）》
《学习 JavaScript 数据结构与算法》
《数据结构与算法分析 : C++描述（第3版）》
《数据结构与算法分析 : C语言描述（第2版）》
《数据结构与算法分析 : Java语言描述（第2版）》&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;职业修炼与规划&lt;/h4&gt;

&lt;p&gt;《大教堂与集市》
《卓有成效的程序员》
《程序员的职业素养》
《程序员修炼之道：从小工到专家》
《软件开发者路线图：从学徒到高手》
《我编程，我快乐: 程序员职业规划之道》
《程序员的思维修炼：开发认知潜能的九堂课》
《高效程序员的45个习惯：敏捷开发修炼之道(修订版)》&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;大师访谈&lt;/h4&gt;

&lt;p&gt;《编程大师智慧》
《编程大师访谈录》
《编程人生 : 15位软件先驱访谈录》
《奇思妙想 : 15位计算机天才及其重大发现》
《图灵和ACM图灵奖（1966-2015 第五版） 纪念计算机诞生70周年》&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;架构/性能&lt;/h4&gt;

&lt;p&gt;《微服务设计》
《大数据日知录》
《企业应用架构模式》
《Web性能权威指南》
《SRE：Google运维解密》
《发布！软件的设计与部署》
《高扩展性网站的 50 条原则》
《大型网站技术架构:核心原理与案例分析》
《恰如其分的软件架构：风险驱动的设计方法》
《软件系统架构：使用视点和视角与利益相关者合作（第2版）》&lt;/p&gt;

&lt;h4 id=&quot;web&quot;&gt;Web前端&lt;/h4&gt;

&lt;p&gt;《高性能 JavaScript》
《锋利的 jQuery（第2版）》
《编写可维护的 JavaScript》
《你不知道的 JavaScript（上）》
《JavaScript 权威指南（第6版）》
《JavaScript 语言精粹（修订版）》
《JavaScript DOM编程艺术 （第2版）》
《JavaScript 高级程序设计（第3版）》
《JavaScript 异步编程：设计快速响应的网络应用》
《Effective JavaScript：编写高质量JavaScript代码的68个有效方法》
《HTML5 权威指南》
《HTML5 秘籍（第2版）》
《HTML5 与 CSS3 基础教程（第八版）》
《CSS揭秘》
《CSS设计指南（第3版）》
《CSS 权威指南（第3版）》
《深入浅出 HTML 与 CSS》&lt;/p&gt;

&lt;h4 id=&quot;java&quot;&gt;Java开发&lt;/h4&gt;

&lt;p&gt;《Java8 实战》
《Java并发编程实战》
《Java性能权威指南》
《Java程序员修炼之道》
《实战Java高并发程序设计》
《Java编程思想 （第4版）》
《深入理解Java虚拟机（第2版）》
《Effective java 中文版（第2版）》
《Java核心技术·卷1：基础知识（原书第9版）》
《Java核心技术（卷2）：高级特性（原书第9版） : 高级特性》&lt;/p&gt;

&lt;h4 id=&quot;net&quot;&gt;.NET&lt;/h4&gt;

&lt;p&gt;《精通C#（第6版）》
《深入理解C#（第3版）》
《CLR via C#（第4版）》&lt;/p&gt;

&lt;h4 id=&quot;python&quot;&gt;Python&lt;/h4&gt;

&lt;p&gt;《集体智慧编程》
《笨办法学Python》
《Python基础教程》
《Python源码剖析》
《Head First Python》
《与孩子一起学编程》
《Python学习手册（第4版）》
《Python Cookbook（第3版）》
《Python参考手册（第4版）》
《Python核心编程（第3版）》
《Python科学计算（第2版）》
《利用 Python 进行数据分析》
《Think Python：像计算机科学家一样思考Python（第2版）》
《Python编程实战:运用设计模式、并发和程序库创建高质量程序》
《Python绝技：运用Python成为顶级黑客》
《Flask Web开发:基于Python的Web应用开发实战》&lt;/p&gt;

&lt;h4 id=&quot;android&quot;&gt;Android&lt;/h4&gt;

&lt;p&gt;《Android编程权威指南（第2版）》
《移动应用UI设计模式（第2版）》&lt;/p&gt;

&lt;h4 id=&quot;ios&quot;&gt;iOS&lt;/h4&gt;

&lt;p&gt;《iOS编程实战》
《iOS编程（第4版）》
《Objective-C高级编程》
《Effective Objective C 2.0：编写高质量iOS与OS X代码的52个有效方法》&lt;/p&gt;

&lt;h4 id=&quot;php&quot;&gt;PHP&lt;/h4&gt;

&lt;p&gt;《Head First PHP &amp;amp; MySQL（中文版）》
《PHP高级程序设计 : 模式、框架与测试》
《深入PHP：面向对象、模式与实践（第3版）》&lt;/p&gt;

&lt;h4 id=&quot;c&quot;&gt;C语言&lt;/h4&gt;

&lt;p&gt;《C标准库》
《C和指针》
《C专家编程》
《C陷阱与缺陷》
《C语言接口与实现》
《C程序设计语言（第2版）》
《C语言参考手册（第5版）》&lt;/p&gt;

&lt;h4 id=&quot;c-1&quot;&gt;C++&lt;/h4&gt;

&lt;p&gt;《C++标准库》
《C++编程思想》
《C++语言的设计与演化》
《C++程序设计原理与实践》
《C++ Primer （中文第5版）》
《C++程序设计语言(第1-3部分)(原书第4版) 》
《More Effective C++:35个改善编程与设计的有效方法(中文版) 》
《Effective C++:改善程序与设计的55个具体做法(第3版)(中文版) 》&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;机器学习和数据挖掘&lt;/h4&gt;

&lt;p&gt;《数据之巅》
《矩阵分析》
《机器学习》
《统计学习方法》
《机器学习导论》
《推荐系统实践》
《机器学习实战》
《Web数据挖掘》
《深入浅出统计学》
《模式分类（第2版）》
《概率论与数理统计》
《统计学习基础(第2版)(英文) 》
《数据挖掘：概念与技术（第3版）》
《数据挖掘：实用机器学习工具与技术（原书第3版）》
《大数据：互联网大规模数据挖掘与分布式处理（第2版）》&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;数据库&lt;/h4&gt;

&lt;p&gt;《SQL应用重构》
《SQL Cookbook》
《高性能MySQL （第3版）》
《深入浅出SQL（中文版）》
《MySQL技术内幕 : InnoDB存储引擎（第2版）》
《深入浅出MySQL : 数据库开发、优化与管理维护》&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;测试&lt;/h4&gt;

&lt;p&gt;《探索式软件测试》
《有效的单元测试》
《Google软件测试之道》&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;项目与团队&lt;/h4&gt;

&lt;p&gt;《人月神话》
《快速软件开发》
《人件（原书第3版）》
《门后的秘密：卓越管理的故事》
《极客与团队：软件工程师的团队生存秘笈》&lt;/p&gt;

&lt;h4 id=&quot;section-11&quot;&gt;求职面试&lt;/h4&gt;

&lt;p&gt;《程序员面试金典（第5版）》
《编程之美 : 微软技术面试心得》
《金领简历：敲开苹果、微软、谷歌的大门》
《剑指Offer：名企面试官精讲典型编程题（纪念版）》&lt;/p&gt;

&lt;h4 id=&quot;section-12&quot;&gt;编程之外&lt;/h4&gt;

&lt;p&gt;《暗时间》
《数学之美》
《赢得朋友》
《精益创业》
《批判性思维》
《世界是数字的》
《程序员的数学》
《程序员健康指南》
《禅与摩托车维修艺术》
《关键对话：如何高效能沟通》
《写作法宝：非虚构写作指南》
《黑客与画家 : 来自计算机时代的高见》
《软件随想录 : 程序员部落酋长Joel谈软件》
《如何把事情做到最好：改变全球9800万人的人生指导书》&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/%E5%8D%9A%E5%AE%A2/2016/11/02/CSBooks.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/%E5%8D%9A%E5%AE%A2/2016/11/02/CSBooks.html</guid>
        
        <category>个人博客</category>
        
        
        <category>博客</category>
        
      </item>
    
      <item>
        <title>JavaScript权威指南 读书笔记-L</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jquery&quot; id=&quot;markdown-toc-jquery&quot;&gt;19 jQuery类库&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#jquery-1&quot; id=&quot;markdown-toc-jquery-1&quot;&gt;19.1 jQuery基础&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#jquery-2&quot; id=&quot;markdown-toc-jquery-2&quot;&gt;19.1.1 jQuery()函数&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;19.1.2 查询与查询结果&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jquerygettersetter&quot; id=&quot;markdown-toc-jquerygettersetter&quot;&gt;19.2 jQuery的getter和setter&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#html&quot; id=&quot;markdown-toc-html&quot;&gt;19.2.1 获取和设置HTML属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#css&quot; id=&quot;markdown-toc-css&quot;&gt;19.2.2 获取和设置CSS属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#css-1&quot; id=&quot;markdown-toc-css-1&quot;&gt;19.2.3 获取和设置CSS类&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#html-1&quot; id=&quot;markdown-toc-html-1&quot;&gt;19.2.4 获取和设置HTML表单值&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;19.2.5 设置和获取元素内容&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;19.2.6 获取和设置元素的位置高宽&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;19.2.7 获取和设置元素数据&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;19.3 修改文档结构&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;19.3.1 插入和替换元素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;19.3.2 复制元素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;19.3.3 包装元素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;19.3.4 删除元素&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jquery-3&quot; id=&quot;markdown-toc-jquery-3&quot;&gt;19.4 使用jQuery处理事件&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;19.4.1 事件处理程序的简单注册&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#jquery-4&quot; id=&quot;markdown-toc-jquery-4&quot;&gt;19.4.2 jQuery事件处理程序&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#jquery-5&quot; id=&quot;markdown-toc-jquery-5&quot;&gt;19.4.3 jQuery事件对象&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;19.4.4 事件处理程序的高级注册&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;19.4.5 注销事件处理程序&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;19.4.6 触发事件&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;19.4.7 自定义事件&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;19.4.8 实时事件&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;19.5 动画效果&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;19.5.1 简单动画&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;19.5.2 自定义动画&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-18&quot; id=&quot;markdown-toc-section-18&quot;&gt;19.5.3 动画的取消，延迟和队列&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jqueryajax&quot; id=&quot;markdown-toc-jqueryajax&quot;&gt;19.6 jQuery中的Ajax&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#load&quot; id=&quot;markdown-toc-load&quot;&gt;19.6.1 load()方法&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ajax&quot; id=&quot;markdown-toc-ajax&quot;&gt;19.6.2 Ajax工具函数&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#jqueryajax-1&quot; id=&quot;markdown-toc-jqueryajax-1&quot;&gt;19.6.3 jQuery.ajax()函数&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ajax-1&quot; id=&quot;markdown-toc-ajax-1&quot;&gt;19.6.4 Ajax事件&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-19&quot; id=&quot;markdown-toc-section-19&quot;&gt;19.7 工具函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jquery-6&quot; id=&quot;markdown-toc-jquery-6&quot;&gt;19.8 jQuery选择器和选取方法&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#jquery-7&quot; id=&quot;markdown-toc-jquery-7&quot;&gt;19.8.1 jQuery选择器&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-20&quot; id=&quot;markdown-toc-section-20&quot;&gt;19.8.2 选取方法&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jquery-8&quot; id=&quot;markdown-toc-jquery-8&quot;&gt;19.9 jQuery的插件扩展&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jquery-ui&quot; id=&quot;markdown-toc-jquery-ui&quot;&gt;19.10 jQuery UI类库&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-21&quot; id=&quot;markdown-toc-section-21&quot;&gt;20 客户端存储&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#localstoragesessionstorage&quot; id=&quot;markdown-toc-localstoragesessionstorage&quot;&gt;20.1 localStorage和sessionStorage&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-22&quot; id=&quot;markdown-toc-section-22&quot;&gt;20.1.1 存储有效期和作用域&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#api&quot; id=&quot;markdown-toc-api&quot;&gt;20.1.2 存储API&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-23&quot; id=&quot;markdown-toc-section-23&quot;&gt;20.1.3 存储事件&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cookie&quot; id=&quot;markdown-toc-cookie&quot;&gt;20.2 cookie&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#cookie-1&quot; id=&quot;markdown-toc-cookie-1&quot;&gt;20.2.1 cookie属性：有效期和作用域&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cookie-2&quot; id=&quot;markdown-toc-cookie-2&quot;&gt;20.2.2 保存cookie&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cookie-3&quot; id=&quot;markdown-toc-cookie-3&quot;&gt;20.2.3 读取cookie&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cookie-4&quot; id=&quot;markdown-toc-cookie-4&quot;&gt;20.2.4 cookie的局限性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cookie-5&quot; id=&quot;markdown-toc-cookie-5&quot;&gt;20.2.5 cookie相关的存储&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ie-userdata&quot; id=&quot;markdown-toc-ie-userdata&quot;&gt;20.3 利用IE userData持久化数据&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web&quot; id=&quot;markdown-toc-web&quot;&gt;20.4 应用程序存储和离线Web应用&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-24&quot; id=&quot;markdown-toc-section-24&quot;&gt;20.4.1 应用程序缓存清单&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-25&quot; id=&quot;markdown-toc-section-25&quot;&gt;20.4.2 缓存的更新&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#web-1&quot; id=&quot;markdown-toc-web-1&quot;&gt;20.4.3 离线Web应用&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-26&quot; id=&quot;markdown-toc-section-26&quot;&gt;21 多媒体和图形编程&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-27&quot; id=&quot;markdown-toc-section-27&quot;&gt;21.1 脚本化图片&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-28&quot; id=&quot;markdown-toc-section-28&quot;&gt;21.2 脚本化音频和视频&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-29&quot; id=&quot;markdown-toc-section-29&quot;&gt;21.2.1 播放类型选择和加载&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-30&quot; id=&quot;markdown-toc-section-30&quot;&gt;21.2.2 控制媒体播放&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-31&quot; id=&quot;markdown-toc-section-31&quot;&gt;21.2.3 查询媒体状态&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-32&quot; id=&quot;markdown-toc-section-32&quot;&gt;21.2.4 媒体相关事件&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#svg&quot; id=&quot;markdown-toc-svg&quot;&gt;21.3 SVG：可伸缩的矢量图形&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#canvas&quot; id=&quot;markdown-toc-canvas&quot;&gt;21.4 canvas中的图形&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-33&quot; id=&quot;markdown-toc-section-33&quot;&gt;21.4.1 绘制线段和填充多边形&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-34&quot; id=&quot;markdown-toc-section-34&quot;&gt;21.4.2 图形属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-35&quot; id=&quot;markdown-toc-section-35&quot;&gt;21.4.3 画布的尺寸和坐标&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-36&quot; id=&quot;markdown-toc-section-36&quot;&gt;21.4.4 坐标系变换&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-37&quot; id=&quot;markdown-toc-section-37&quot;&gt;21.4.5 绘制和填充曲线&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-38&quot; id=&quot;markdown-toc-section-38&quot;&gt;21.4.6 绘制矩形&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-39&quot; id=&quot;markdown-toc-section-39&quot;&gt;21.4.7 颜色，透明度，渐变以及图案&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-40&quot; id=&quot;markdown-toc-section-40&quot;&gt;21.4.8 线段绘制相关的属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-41&quot; id=&quot;markdown-toc-section-41&quot;&gt;21.4.9 画布上绘制文本&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-42&quot; id=&quot;markdown-toc-section-42&quot;&gt;21.4.10 裁剪&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-43&quot; id=&quot;markdown-toc-section-43&quot;&gt;21.4.11 阴影&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-44&quot; id=&quot;markdown-toc-section-44&quot;&gt;21.4.12 图片&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-45&quot; id=&quot;markdown-toc-section-45&quot;&gt;21.4.13 合成&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-46&quot; id=&quot;markdown-toc-section-46&quot;&gt;21.4.14 像素操作&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-47&quot; id=&quot;markdown-toc-section-47&quot;&gt;21.4.15 命中检测&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-48&quot; id=&quot;markdown-toc-section-48&quot;&gt;21.4.16 画布例子：迷你图&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#html5-api&quot; id=&quot;markdown-toc-html5-api&quot;&gt;22 HTML5 API&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-49&quot; id=&quot;markdown-toc-section-49&quot;&gt;22.1 地理位置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-50&quot; id=&quot;markdown-toc-section-50&quot;&gt;22.2 历史记录管理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-51&quot; id=&quot;markdown-toc-section-51&quot;&gt;22.3 跨域消息传递&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web-worker&quot; id=&quot;markdown-toc-web-worker&quot;&gt;22.4 Web Worker&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#worker&quot; id=&quot;markdown-toc-worker&quot;&gt;22.4.1 Worker对象&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#worker-1&quot; id=&quot;markdown-toc-worker-1&quot;&gt;22.4.2 Worker作用域&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#web-worker-&quot; id=&quot;markdown-toc-web-worker-&quot;&gt;22.4.3 Web Worker 的例子&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#arraybuffer&quot; id=&quot;markdown-toc-arraybuffer&quot;&gt;22.5 类型化数组和ArrayBuffer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#blob&quot; id=&quot;markdown-toc-blob&quot;&gt;22.6 Blob&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#blob-1&quot; id=&quot;markdown-toc-blob-1&quot;&gt;22.6.1 文件座位Blob&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#blob-2&quot; id=&quot;markdown-toc-blob-2&quot;&gt;22.6.2 下载Blob&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#blob-3&quot; id=&quot;markdown-toc-blob-3&quot;&gt;22.6.3 构造Blob&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#blob-url&quot; id=&quot;markdown-toc-blob-url&quot;&gt;22.6.4 Blob URL&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#blob-4&quot; id=&quot;markdown-toc-blob-4&quot;&gt;22.6.5 读取Blob&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#api-1&quot; id=&quot;markdown-toc-api-1&quot;&gt;22.7 文件系统API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-52&quot; id=&quot;markdown-toc-section-52&quot;&gt;22.8 客户端数据库&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web-socket&quot; id=&quot;markdown-toc-web-socket&quot;&gt;22.9 Web 套接字，Socket&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全书的第二编：客户端JavaScript&lt;/p&gt;

&lt;p&gt;第19章：jQuery类库&lt;/p&gt;

&lt;p&gt;第20章：客户端存储&lt;/p&gt;

&lt;p&gt;第21章：多媒体和图形编程&lt;/p&gt;

&lt;p&gt;第22章：HTML5 API&lt;/p&gt;

&lt;h3 id=&quot;jquery&quot;&gt;19 jQuery类库&lt;/h3&gt;

&lt;p&gt;主要是由于浏览器之间严重的不兼容性，导致客户端的API复杂得很，js必须使用框架和类库，简化操作，隐藏差异，于是出现了jQuery&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery能做什么&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在文档中轻松找到想要的元素并且操作，添加内容，编辑属性和css样式，定义事件处理程序，执行动画。&lt;/p&gt;

&lt;p&gt;方法会尽可能返回对象本身，这样子链式调用就可以了&lt;/p&gt;

&lt;h4 id=&quot;jquery-1&quot;&gt;19.1 jQuery基础&lt;/h4&gt;

&lt;p&gt;全局方法jquery()，这个方法使用太频繁，有个别名就是美元符号$，这是核心查询方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var divs = $(&quot;div&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;jquery-2&quot;&gt;19.1.1 jQuery()函数&lt;/h5&gt;

&lt;h5 id=&quot;section&quot;&gt;19.1.2 查询与查询结果&lt;/h5&gt;

&lt;h4 id=&quot;jquerygettersetter&quot;&gt;19.2 jQuery的getter和setter&lt;/h4&gt;

&lt;h5 id=&quot;html&quot;&gt;19.2.1 获取和设置HTML属性&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;form&quot;).attr(&quot;action&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;css&quot;&gt;19.2.2 获取和设置CSS属性&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;h1&quot;).css(&quot;font-weight&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;css-1&quot;&gt;19.2.3 获取和设置CSS类&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;h1&quot;).addClass(&quot;h1lite&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;html-1&quot;&gt;19.2.4 获取和设置HTML表单值&lt;/h5&gt;

&lt;h5 id=&quot;section-1&quot;&gt;19.2.5 设置和获取元素内容&lt;/h5&gt;

&lt;h5 id=&quot;section-2&quot;&gt;19.2.6 获取和设置元素的位置高宽&lt;/h5&gt;

&lt;h5 id=&quot;section-3&quot;&gt;19.2.7 获取和设置元素数据&lt;/h5&gt;

&lt;h4 id=&quot;section-4&quot;&gt;19.3 修改文档结构&lt;/h4&gt;

&lt;p&gt;html()和text()方法可以用来设置元素内容&lt;/p&gt;

&lt;h5 id=&quot;section-5&quot;&gt;19.3.1 插入和替换元素&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8d6a2535gw1f9clitmg3aj20m8066gmt.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-6&quot;&gt;19.3.2 复制元素&lt;/h5&gt;

&lt;h5 id=&quot;section-7&quot;&gt;19.3.3 包装元素&lt;/h5&gt;

&lt;h5 id=&quot;section-8&quot;&gt;19.3.4 删除元素&lt;/h5&gt;

&lt;h4 id=&quot;jquery-3&quot;&gt;19.4 使用jQuery处理事件&lt;/h4&gt;

&lt;h5 id=&quot;section-9&quot;&gt;19.4.1 事件处理程序的简单注册&lt;/h5&gt;

&lt;p&gt;简单的事件注册方法，可用于常用的每一一个浏览器事件，比如给单价注册一个事件处理程序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;p&quot;).click(function() { $(this).css(&quot;background-color&quot;, &quot;gray&quot;); });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面是jQuery定义的简单事件处理程序注册的方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8d6a2535gw1f9cln9u25pj20g503rgm6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;jquery-4&quot;&gt;19.4.2 jQuery事件处理程序&lt;/h5&gt;

&lt;h5 id=&quot;jquery-5&quot;&gt;19.4.3 jQuery事件对象&lt;/h5&gt;

&lt;p&gt;通过定义自己的Event对象来隐藏浏览器之间的实现差异&lt;/p&gt;

&lt;p&gt;对象的属性和方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8d6a2535gw1f9clpe2yxlj20hj04hgm7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8d6a2535gw1f9clq020fkj20hg01kdft.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8d6a2535gw1f9clqbbgccj20g501xmxe.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-10&quot;&gt;19.4.4 事件处理程序的高级注册&lt;/h5&gt;

&lt;p&gt;使用bind方法来为命名的事件类型绑定处理程序&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$('p').bind('click', f);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-11&quot;&gt;19.4.5 注销事件处理程序&lt;/h5&gt;

&lt;p&gt;bind来绑定之后，可以使用unbind来解绑&lt;/p&gt;

&lt;h5 id=&quot;section-12&quot;&gt;19.4.6 触发事件&lt;/h5&gt;

&lt;h5 id=&quot;section-13&quot;&gt;19.4.7 自定义事件&lt;/h5&gt;

&lt;h5 id=&quot;section-14&quot;&gt;19.4.8 实时事件&lt;/h5&gt;

&lt;h4 id=&quot;section-15&quot;&gt;19.5 动画效果&lt;/h4&gt;

&lt;h5 id=&quot;section-16&quot;&gt;19.5.1 简单动画&lt;/h5&gt;

&lt;p&gt;fadeIn，fadeOut，fadeTo&lt;/p&gt;

&lt;p&gt;show，hide，toggle&lt;/p&gt;

&lt;p&gt;slideDown，slideUp，slideToggle&lt;/p&gt;

&lt;h5 id=&quot;section-17&quot;&gt;19.5.2 自定义动画&lt;/h5&gt;

&lt;h5 id=&quot;section-18&quot;&gt;19.5.3 动画的取消，延迟和队列&lt;/h5&gt;

&lt;h4 id=&quot;jqueryajax&quot;&gt;19.6 jQuery中的Ajax&lt;/h4&gt;

&lt;h5 id=&quot;load&quot;&gt;19.6.1 load()方法&lt;/h5&gt;
&lt;p&gt;load是jQuery中最简单的，传入一个url，异步加载url的内容，然后将内容插入元素中，替换原有内容&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
setInterval(function() { $('status').load(&quot;status_report.html&quot;); }, 60000);
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;ajax&quot;&gt;19.6.2 Ajax工具函数&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;jQuery.getScript() 异步加载js文件，执行完成后调用&lt;/li&gt;
  &lt;li&gt;jQuery.getJson() 获取文本，然后特殊处理一下&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;jqueryajax-1&quot;&gt;19.6.3 jQuery.ajax()函数&lt;/h5&gt;

&lt;p&gt;所有的ajax工具最后都会调用ajax函数，这是整个类库中最复杂的函数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jQuery.ajax({
  type: &quot;GET&quot;,
  url: url,
  data: null,
  dataType: &quot;script&quot;,
  success: callback
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;ajax-1&quot;&gt;19.6.4 Ajax事件&lt;/h5&gt;

&lt;h4 id=&quot;section-19&quot;&gt;19.7 工具函数&lt;/h4&gt;

&lt;p&gt;jQuery.browser 提供浏览器相关的信息&lt;/p&gt;

&lt;p&gt;jQuery.contains()&lt;/p&gt;

&lt;h4 id=&quot;jquery-6&quot;&gt;19.8 jQuery选择器和选取方法&lt;/h4&gt;

&lt;h5 id=&quot;jquery-7&quot;&gt;19.8.1 jQuery选择器&lt;/h5&gt;

&lt;h5 id=&quot;section-20&quot;&gt;19.8.2 选取方法&lt;/h5&gt;

&lt;h4 id=&quot;jquery-8&quot;&gt;19.9 jQuery的插件扩展&lt;/h4&gt;

&lt;h4 id=&quot;jquery-ui&quot;&gt;19.10 jQuery UI类库&lt;/h4&gt;

&lt;h3 id=&quot;section-21&quot;&gt;20 客户端存储&lt;/h3&gt;

&lt;p&gt;存储形式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web存储，H5的API&lt;/li&gt;
  &lt;li&gt;cookie&lt;/li&gt;
  &lt;li&gt;IE user data&lt;/li&gt;
  &lt;li&gt;离线Web应用&lt;/li&gt;
  &lt;li&gt;Web数据库&lt;/li&gt;
  &lt;li&gt;文件西戎&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;localstoragesessionstorage&quot;&gt;20.1 localStorage和sessionStorage&lt;/h4&gt;

&lt;h5 id=&quot;section-22&quot;&gt;20.1.1 存储有效期和作用域&lt;/h5&gt;

&lt;h5 id=&quot;api&quot;&gt;20.1.2 存储API&lt;/h5&gt;

&lt;h5 id=&quot;section-23&quot;&gt;20.1.3 存储事件&lt;/h5&gt;

&lt;h4 id=&quot;cookie&quot;&gt;20.2 cookie&lt;/h4&gt;

&lt;h5 id=&quot;cookie-1&quot;&gt;20.2.1 cookie属性：有效期和作用域&lt;/h5&gt;

&lt;h5 id=&quot;cookie-2&quot;&gt;20.2.2 保存cookie&lt;/h5&gt;

&lt;h5 id=&quot;cookie-3&quot;&gt;20.2.3 读取cookie&lt;/h5&gt;

&lt;h5 id=&quot;cookie-4&quot;&gt;20.2.4 cookie的局限性&lt;/h5&gt;

&lt;h5 id=&quot;cookie-5&quot;&gt;20.2.5 cookie相关的存储&lt;/h5&gt;

&lt;h4 id=&quot;ie-userdata&quot;&gt;20.3 利用IE userData持久化数据&lt;/h4&gt;

&lt;h4 id=&quot;web&quot;&gt;20.4 应用程序存储和离线Web应用&lt;/h4&gt;

&lt;h5 id=&quot;section-24&quot;&gt;20.4.1 应用程序缓存清单&lt;/h5&gt;

&lt;h5 id=&quot;section-25&quot;&gt;20.4.2 缓存的更新&lt;/h5&gt;

&lt;h5 id=&quot;web-1&quot;&gt;20.4.3 离线Web应用&lt;/h5&gt;

&lt;h3 id=&quot;section-26&quot;&gt;21 多媒体和图形编程&lt;/h3&gt;

&lt;p&gt;使用js来操作图片，控制音频和视频流以及画图&lt;/p&gt;

&lt;h4 id=&quot;section-27&quot;&gt;21.1 脚本化图片&lt;/h4&gt;

&lt;h4 id=&quot;section-28&quot;&gt;21.2 脚本化音频和视频&lt;/h4&gt;

&lt;h5 id=&quot;section-29&quot;&gt;21.2.1 播放类型选择和加载&lt;/h5&gt;

&lt;h5 id=&quot;section-30&quot;&gt;21.2.2 控制媒体播放&lt;/h5&gt;

&lt;h5 id=&quot;section-31&quot;&gt;21.2.3 查询媒体状态&lt;/h5&gt;

&lt;h5 id=&quot;section-32&quot;&gt;21.2.4 媒体相关事件&lt;/h5&gt;

&lt;h4 id=&quot;svg&quot;&gt;21.3 SVG：可伸缩的矢量图形&lt;/h4&gt;

&lt;p&gt;SVG是用于描述图形的XML语法，不同于光栅图像格式，GIF，JPEG，PNG等，用像素来庙会矩阵，一个svg表示的画该图形的时候必要路径的一种精准，分辨率无关的描述&lt;/p&gt;

&lt;h4 id=&quot;canvas&quot;&gt;21.4 canvas中的图形&lt;/h4&gt;

&lt;h5 id=&quot;section-33&quot;&gt;21.4.1 绘制线段和填充多边形&lt;/h5&gt;

&lt;h5 id=&quot;section-34&quot;&gt;21.4.2 图形属性&lt;/h5&gt;

&lt;h5 id=&quot;section-35&quot;&gt;21.4.3 画布的尺寸和坐标&lt;/h5&gt;

&lt;h5 id=&quot;section-36&quot;&gt;21.4.4 坐标系变换&lt;/h5&gt;

&lt;h5 id=&quot;section-37&quot;&gt;21.4.5 绘制和填充曲线&lt;/h5&gt;

&lt;h5 id=&quot;section-38&quot;&gt;21.4.6 绘制矩形&lt;/h5&gt;

&lt;h5 id=&quot;section-39&quot;&gt;21.4.7 颜色，透明度，渐变以及图案&lt;/h5&gt;

&lt;h5 id=&quot;section-40&quot;&gt;21.4.8 线段绘制相关的属性&lt;/h5&gt;

&lt;h5 id=&quot;section-41&quot;&gt;21.4.9 画布上绘制文本&lt;/h5&gt;

&lt;h5 id=&quot;section-42&quot;&gt;21.4.10 裁剪&lt;/h5&gt;

&lt;h5 id=&quot;section-43&quot;&gt;21.4.11 阴影&lt;/h5&gt;

&lt;h5 id=&quot;section-44&quot;&gt;21.4.12 图片&lt;/h5&gt;

&lt;h5 id=&quot;section-45&quot;&gt;21.4.13 合成&lt;/h5&gt;

&lt;h5 id=&quot;section-46&quot;&gt;21.4.14 像素操作&lt;/h5&gt;

&lt;h5 id=&quot;section-47&quot;&gt;21.4.15 命中检测&lt;/h5&gt;

&lt;h5 id=&quot;section-48&quot;&gt;21.4.16 画布例子：迷你图&lt;/h5&gt;

&lt;h3 id=&quot;html5-api&quot;&gt;22 HTML5 API&lt;/h3&gt;

&lt;p&gt;H5不仅仅是最新的HTML标准，也是一整套目前的Web应用技术，&lt;/p&gt;

&lt;h4 id=&quot;section-49&quot;&gt;22.1 地理位置&lt;/h4&gt;

&lt;h4 id=&quot;section-50&quot;&gt;22.2 历史记录管理&lt;/h4&gt;

&lt;h4 id=&quot;section-51&quot;&gt;22.3 跨域消息传递&lt;/h4&gt;

&lt;h4 id=&quot;web-worker&quot;&gt;22.4 Web Worker&lt;/h4&gt;

&lt;p&gt;客户端js的一个基本特性就是单线程，浏览器无法同事运行两个事件处理程序，客户端程序员不需要关心并行编程&lt;/p&gt;

&lt;p&gt;worker是执行代码的并行现成，有自己的上下文&lt;/p&gt;

&lt;h5 id=&quot;worker&quot;&gt;22.4.1 Worker对象&lt;/h5&gt;

&lt;h5 id=&quot;worker-1&quot;&gt;22.4.2 Worker作用域&lt;/h5&gt;

&lt;h5 id=&quot;web-worker-&quot;&gt;22.4.3 Web Worker 的例子&lt;/h5&gt;

&lt;h4 id=&quot;arraybuffer&quot;&gt;22.5 类型化数组和ArrayBuffer&lt;/h4&gt;

&lt;h4 id=&quot;blob&quot;&gt;22.6 Blob&lt;/h4&gt;

&lt;p&gt;大数据块的不透明引用或者句柄，Binary Large Object&lt;/p&gt;

&lt;h5 id=&quot;blob-1&quot;&gt;22.6.1 文件座位Blob&lt;/h5&gt;

&lt;h5 id=&quot;blob-2&quot;&gt;22.6.2 下载Blob&lt;/h5&gt;

&lt;h5 id=&quot;blob-3&quot;&gt;22.6.3 构造Blob&lt;/h5&gt;

&lt;h5 id=&quot;blob-url&quot;&gt;22.6.4 Blob URL&lt;/h5&gt;

&lt;h5 id=&quot;blob-4&quot;&gt;22.6.5 读取Blob&lt;/h5&gt;

&lt;h4 id=&quot;api-1&quot;&gt;22.7 文件系统API&lt;/h4&gt;

&lt;h4 id=&quot;section-52&quot;&gt;22.8 客户端数据库&lt;/h4&gt;

&lt;h4 id=&quot;web-socket&quot;&gt;22.9 Web 套接字，Socket&lt;/h4&gt;

&lt;p&gt;允许客户端脚本在客户端和支持WebSocket协议的服务器端创建双向的套接字类型的连接，而不是局限于HTTP这种相对比较特殊的网络协议&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/javascript/2016/11/01/JavaScriptDefineBook-L.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/javascript/2016/11/01/JavaScriptDefineBook-L.html</guid>
        
        <category>javascript</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>JavaScript权威指南 读书笔记-K</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;17 事件处理&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;17.1 事件类型&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;17.1.1 传统事件类型&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#dom&quot; id=&quot;markdown-toc-dom&quot;&gt;17.1.2 DOM事件&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#html5&quot; id=&quot;markdown-toc-html5&quot;&gt;17.1.3 HTML5事件&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;17.1.4 触摸屏和移动设备事件&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;17.2 注册事件处理程序&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#javascript&quot; id=&quot;markdown-toc-javascript&quot;&gt;17.2.1 设置JavaScript对象属性为事件处理程序&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#html&quot; id=&quot;markdown-toc-html&quot;&gt;17.2.2 设置HTML标签属性为事件处理程序&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#addeventlistener&quot; id=&quot;markdown-toc-addeventlistener&quot;&gt;17.2.3 addEventListener()&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#attachevent&quot; id=&quot;markdown-toc-attachevent&quot;&gt;17.2.4 attachEvent&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;17.3 事件处理程序的调用&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;17.3.1 事件处理程序的参数&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;17.3.2 事件处理程序的运行环境&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;17.3.3 事件处理程序的作用域&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;17.3.4 事件处理程序的返回值&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;17.3.5 调用顺序&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;17.3.6 事件传播&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;17.3.7 事件取消&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#onload&quot; id=&quot;markdown-toc-onload&quot;&gt;17.4 文档加载事件 onload&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;17.5 鼠标事件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;17.6 鼠标滚轮事件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;17.7 拖放事件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;17.8 文本事件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;17.9 键盘事件&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http&quot; id=&quot;markdown-toc-http&quot;&gt;18 脚本化HTTP&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#xmlhttprequest&quot; id=&quot;markdown-toc-xmlhttprequest&quot;&gt;18.1 使用XMLHttpRequest&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-18&quot; id=&quot;markdown-toc-section-18&quot;&gt;18.1.1 指定请求&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-19&quot; id=&quot;markdown-toc-section-19&quot;&gt;18.1.2 取得响应&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#body&quot; id=&quot;markdown-toc-body&quot;&gt;18.1.3 请求body的编码&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#http-1&quot; id=&quot;markdown-toc-http-1&quot;&gt;18.1.4 HTTP进度事件&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-20&quot; id=&quot;markdown-toc-section-20&quot;&gt;18.1.5 终止请求和超时&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#http-2&quot; id=&quot;markdown-toc-http-2&quot;&gt;18.1.6 跨域HTTP请求&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#scripthttpjsonp&quot; id=&quot;markdown-toc-scripthttpjsonp&quot;&gt;18.2 借助script发送HTTP请求：JSONP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#comet&quot; id=&quot;markdown-toc-comet&quot;&gt;18.3 基于服务器顿推送事件的Comet技术&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全书的第二编：客户端JavaScript&lt;/p&gt;

&lt;p&gt;第17章：事件处理&lt;/p&gt;

&lt;p&gt;第18章：脚本化HTTP&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;17 事件处理&lt;/h3&gt;

&lt;p&gt;客户端js是异步事件驱动编程模型，程序的驱动有时候是依赖某些事件的发生，比如文档加载完成，点击鼠标等。如果关注某种特定类型的时间，就可以注册事件发生要调用的函数，基本上所有的UI程序都是这个模型&lt;/p&gt;

&lt;p&gt;事件类型，是一个说明发生了什么的字符串，比如mousemove，keydown，load，用这个字符串来标识所谈论的特定类型的事件&lt;/p&gt;

&lt;p&gt;事件目标是发生的事件与之相关的对象，一个时间，肯定有相关的类型和目标，比如window上的load事件和button的click事件，在客户端js中window，document和element是最常见的事件目标&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事件处理程序&lt;/strong&gt;，event handler，或者说&lt;strong&gt;事件监听程序&lt;/strong&gt;，event listener 是处理或相应事件的函数&lt;/p&gt;

&lt;p&gt;事件发生时候，对象上注册的事件处理程序被调用的时候，会说浏览器触发或者派发了事件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事件对象&lt;/strong&gt;，最为参数传递给事件处理函数，都会有包含type属性和target属性&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事件传播&lt;/strong&gt;，是浏览器决定那个对象触发其事件处理程序的过程，类似的概念是事件捕获&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事件类型&lt;/strong&gt;，各种各样的事件&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;17.1 事件类型&lt;/h4&gt;

&lt;p&gt;web初期的事件已经有很好的支持了，新的事件api定义来源有3个，w3c的新标准草案，H5规范产生的新事件，移动端的发展带来的新事件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;事件分类&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;依赖于设备的输入事件，比如鼠标和键盘，mousedown，mousemove，mouseup，keydown，keypress，touchmove，gesturerechange&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;独立于设备的输入事件，没有直接相关的输入设备，click事件，textinput&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用户界面事件，较高级的事件，通常出现在定义web应用UI的html表单元素上，文本输入获取键盘焦点的focus事件，用户改变表单元素显示的嫦娥事件，单机表单中提交按钮的submit事件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;状态变化事件，有些时间不是用户触发，而是网络或者浏览器触发，表示某种状态的变化，比如文档加载完成的load事件，还有I/O的异步通知&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;特定API事件，拖放的事件dragstart，dragenter，dragover，drop，H5的video和audio元素有很多事件来控制音视频播放&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;计时器和错误处理程序&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;section-2&quot;&gt;17.1.1 传统事件类型&lt;/h5&gt;

&lt;p&gt;很多老API都是常用并且广泛被支持的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;表单相关事件，submit，reset，文本域change的事件等等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;window事件，浏览器窗口本身触发的事件，而不是文档元素触发的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;鼠标事件，在文档上移动或者单击鼠标都会产生鼠标事件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;键盘事件，按下或者释放键盘按键都会产生事件&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;dom&quot;&gt;17.1.2 DOM事件&lt;/h5&gt;

&lt;p&gt;DOM Level 3 Events，W3C的规范&lt;/p&gt;

&lt;h5 id=&quot;html5&quot;&gt;17.1.3 HTML5事件&lt;/h5&gt;

&lt;p&gt;HTML5加入的新元素，audio和video元素，都有很长的事件列表&lt;/p&gt;

&lt;p&gt;拖放API，历史管理机制，表单的重新定义，离线的web应用支持&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;17.1.4 触摸屏和移动设备事件&lt;/h5&gt;

&lt;p&gt;一般来讲使用的是和传统事件的映射，比如点击，但是有些比较特殊，比如旋转设备，手势事件等，在iPad和iphone的safari上有所实现&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;17.2 注册事件处理程序&lt;/h4&gt;

&lt;p&gt;注册事件处理有两个方式，第一种比较老，是在对象中的属性设定函数，第二种是将事件处理传递给对象或者元素的一个方法&lt;/p&gt;

&lt;h5 id=&quot;javascript&quot;&gt;17.2.1 设置JavaScript对象属性为事件处理程序&lt;/h5&gt;

&lt;p&gt;注册事件处理程序最简单的方式就是设置事件目标的属性为所需事件处理程序函数，比如onclick，onchange，onload，onmouseover等&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.onload = function() {
  var elt = document.getElementById(&quot;shipping_address&quot;);
  elt.onsubmit = function() {return validate(this);}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;html&quot;&gt;17.2.2 设置HTML标签属性为事件处理程序&lt;/h5&gt;

&lt;p&gt;程序代码直接写在html元素的属性里面&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;button onclick=&quot;alert('Thank you');&quot;&amp;gt;click here&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;H5定义了事件处理程序的完整列表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535gw1f9bakqlnhlj20ga037q3b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;addeventlistener&quot;&gt;17.2.3 addEventListener()&lt;/h5&gt;

&lt;p&gt;这个方法可以为事件目标注册一个事件处理程序，addEventListener()接受三个参数，第一个是要注册的事件类型，或者名字自妇产，不包含前缀on，第二个参数是当指定类型的时间繁盛时候应该调用的函数，最后一个参数是布尔值，通常是false，如果传递了true，那么函数将注册为捕获事件处理程序，在事件的不同的调度阶段使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;button id = &quot;mybutton&quot;&amp;gt; click me&amp;lt;/button&amp;gt;
&amp;lt;script&amp;gt;
var b = document.getElementById(&quot;mybutton&quot;);
b.onclick = function() {alert(&quot;Thanks for clicking me! &quot;);};
b.addEventListener(&quot;click&quot;, function() { alert(&quot;Thanks again!&quot;);}, false);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;addEventListener的好处是可以为一个对象注册多个事件处理程序函数，相对的还有removeEventistener方法来删除事件处理函数&lt;/p&gt;

&lt;h5 id=&quot;attachevent&quot;&gt;17.2.4 attachEvent&lt;/h5&gt;

&lt;p&gt;IE9 之前不支持addEventListener和removeEventistener&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;17.3 事件处理程序的调用&lt;/h4&gt;
&lt;p&gt;一旦注册事件处理程序成功之后，浏览器就会在指定对象上发生事件的时候自动调用&lt;/p&gt;

&lt;h5 id=&quot;section-6&quot;&gt;17.3.1 事件处理程序的参数&lt;/h5&gt;

&lt;p&gt;通常事件处理程序的调用会把事件对象作为他们的一个参数，事件对象的属性提供了事件有关的信息&lt;/p&gt;

&lt;h5 id=&quot;section-7&quot;&gt;17.3.2 事件处理程序的运行环境&lt;/h5&gt;

&lt;h5 id=&quot;section-8&quot;&gt;17.3.3 事件处理程序的作用域&lt;/h5&gt;

&lt;h5 id=&quot;section-9&quot;&gt;17.3.4 事件处理程序的返回值&lt;/h5&gt;

&lt;h5 id=&quot;section-10&quot;&gt;17.3.5 调用顺序&lt;/h5&gt;

&lt;p&gt;文档语速或其他对象可以为指定注册事件类型注册多个事件处理程序，事件发生的时候，浏览器必须按照如下规则调用所有的事件处理程序&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过设置对象属性会HTML属性注册的处理程序一直优先调用&lt;/li&gt;
  &lt;li&gt;使用addEventListener函数注册的处理程序按照他们的注册顺序调用&lt;/li&gt;
  &lt;li&gt;使用attachEvent注册的处理程序可能按照任何顺序调用，所以代码不应该以来于调用顺序&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-11&quot;&gt;17.3.6 事件传播&lt;/h5&gt;

&lt;h5 id=&quot;section-12&quot;&gt;17.3.7 事件取消&lt;/h5&gt;

&lt;h4 id=&quot;onload&quot;&gt;17.4 文档加载事件 onload&lt;/h4&gt;

&lt;h4 id=&quot;section-13&quot;&gt;17.5 鼠标事件&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535gw1f9bjrs02ukj20lv0fwq66.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-14&quot;&gt;17.6 鼠标滚轮事件&lt;/h4&gt;

&lt;h4 id=&quot;section-15&quot;&gt;17.7 拖放事件&lt;/h4&gt;

&lt;h4 id=&quot;section-16&quot;&gt;17.8 文本事件&lt;/h4&gt;

&lt;h4 id=&quot;section-17&quot;&gt;17.9 键盘事件&lt;/h4&gt;

&lt;h3 id=&quot;http&quot;&gt;18 脚本化HTTP&lt;/h3&gt;

&lt;p&gt;脚本如何实现Web浏览器与服务器之间的通信&lt;/p&gt;

&lt;p&gt;Ajax，描述的是主要使用脚本操纵HTTP的Web应用架构，Asynchronous Javascript and XML
异步的js脚本&lt;/p&gt;

&lt;h4 id=&quot;xmlhttprequest&quot;&gt;18.1 使用XMLHttpRequest&lt;/h4&gt;
&lt;p&gt;XMLHttpRequest的每一个实例都表示一个独立的请求/响应，并且这个对象的属性和方法允许指定请求细节和提取响应数据&lt;/p&gt;

&lt;p&gt;使用这个HTTP API的第一件事就是实例化XMLHttpRequest对象&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var request = new XMLHttpRequest();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一个http请求由4部分组成&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;htto请求方法或者动作，method&lt;/li&gt;
  &lt;li&gt;正在请求的url&lt;/li&gt;
  &lt;li&gt;一个可选的请求头集合，其中可能包括身份验证信息&lt;/li&gt;
  &lt;li&gt;一个可选的请求主体&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务器返回的HTTP响应包含3部分&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个数字和文字组成的状态吗，用来显示请求的成功和失败&lt;/li&gt;
  &lt;li&gt;一个响应头集合&lt;/li&gt;
  &lt;li&gt;响应主体&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-18&quot;&gt;18.1.1 指定请求&lt;/h5&gt;

&lt;p&gt;创建XHR对象之后，发起HTTP请求的下一步是调用XHR的open方法去指定这个请求的两个必须的部分：方法和URL&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;request.open(&quot;GET&quot;, &quot;data.csv&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-19&quot;&gt;18.1.2 取得响应&lt;/h5&gt;

&lt;h5 id=&quot;body&quot;&gt;18.1.3 请求body的编码&lt;/h5&gt;

&lt;p&gt;表单编码是跟在url后面，以requestparam的形式，&lt;/p&gt;

&lt;p&gt;还有json编码和xml编码&lt;/p&gt;

&lt;h5 id=&quot;http-1&quot;&gt;18.1.4 HTTP进度事件&lt;/h5&gt;

&lt;h5 id=&quot;section-20&quot;&gt;18.1.5 终止请求和超时&lt;/h5&gt;

&lt;h5 id=&quot;http-2&quot;&gt;18.1.6 跨域HTTP请求&lt;/h5&gt;

&lt;h4 id=&quot;scripthttpjsonp&quot;&gt;18.2 借助script发送HTTP请求：JSONP&lt;/h4&gt;

&lt;h4 id=&quot;comet&quot;&gt;18.3 基于服务器顿推送事件的Comet技术&lt;/h4&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/javascript/2016/11/01/JavaScriptDefineBook-K.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/javascript/2016/11/01/JavaScriptDefineBook-K.html</guid>
        
        <category>javascript</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>手动安装Atom插件</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;具体手顺&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#faq&quot; id=&quot;markdown-toc-faq&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;手动安装atom的扩展插件，比如minimap等&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;具体手顺&lt;/h4&gt;

&lt;p&gt;下载atom插件的源代码后使用npm安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/.atom/packages
git clone &amp;lt;你想安装的 Package 的仓库链接&amp;gt; # 比如：git clone https://atom.io/packages/emmet
cd &amp;lt;Package 路径&amp;gt; # cd emmet-atom
npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;faq&quot;&gt;FAQ&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;npm的国内配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;git bash下，在主目录中新建.bash_profile文件，添加alias&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \
--cache=$HOME/.npm/.cache/cnpm \
--disturl=https://npm.taobao.org/dist \
--userconfig=$HOME/.cnpmrc&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用cnpm代替npm，指向淘宝镜像&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/memo/2016/10/31/AtomManualInstallPackageMemo.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/memo/2016/10/31/AtomManualInstallPackageMemo.html</guid>
        
        <category>atom</category>
        
        <category>memo</category>
        
        
        <category>memo</category>
        
      </item>
    
      <item>
        <title>CSS权威指南 读书笔记-B</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;4 值和单位&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;数字&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;百分数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;颜色&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;长度单位&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#url&quot; id=&quot;markdown-toc-url&quot;&gt;URL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;关键字&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#css2&quot; id=&quot;markdown-toc-css2&quot;&gt;CSS2单位&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;5 字体&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;字体系列&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;字体加粗&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;字体大小&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;字体风格&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;字体变形&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;拉伸和调整字体&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#font-&quot; id=&quot;markdown-toc-font-&quot;&gt;font 属性&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第4章：值和单位&lt;/p&gt;

&lt;p&gt;第5章：字体&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;4 值和单位&lt;/h3&gt;

&lt;p&gt;单位是css所有工作的基础，空白多宽多大，颜色怎么表示等等，都需要单位来表示&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;数字&lt;/h4&gt;

&lt;p&gt;css中的数字有整数和实数，实数也就是整数后面带小数部分，可以是负数&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;百分数&lt;/h4&gt;

&lt;p&gt;这是一个会经过计算得出的实数，最后的结果是什么根其他的元素有关，整数后面加上一个百分号的表现形式&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;颜色&lt;/h4&gt;

&lt;p&gt;两种方式，要么直接指定名字，比如red，purplr，要么使用十六进制的色号&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;命名颜色&lt;/strong&gt;；css规范有17个颜色名字可以使用，css3有140种&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用RGB指定颜色&lt;/strong&gt;；使用红绿蓝三原色的不同混合比例来指定颜色&lt;/p&gt;

&lt;p&gt;函数式RGB指定颜色；rgb函数使用一个百分数或者整数三元组表示，百分数范围是1到100，整数范围0到255&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rgb(100%,100%,100%)
rgb(0%,0%,0%)

rgb(255,255,255)
rgb(0,0,0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;属性中函数式指定颜色的使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;h1 {color: rgb(0,0,0);}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;十六进制RGB颜色&lt;/strong&gt;；就是六位十六进制数字来表示颜色&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;h1 {color: #000000;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;颜色汇总&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web安全颜色&lt;/strong&gt;；在256色计算机上总能避免抖动的颜色，十六进制数字是0，3，6，9，C，F，使用这些数字组成的色号就比较安全&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;长度单位&lt;/h4&gt;

&lt;p&gt;可以大致分为两类，绝对长度单位和相对长度单位&lt;/p&gt;

&lt;p&gt;很多地方都依赖长度来制定元素的样式，所以有多种多样的长度表示方式，所有长度单位都可以是正数或者负数，后面有一个单位，是一两个英文字母的缩写，当长度为0的时候，可以省略单位&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;绝对长度单位&lt;/strong&gt;；web设计中几乎很少使用绝对长度单位，有5种&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;英寸 in 手袋英美的影响吧，毕竟是灯塔国的Internet比较厉害&lt;/li&gt;
  &lt;li&gt;厘米 cm 国际单位&lt;/li&gt;
  &lt;li&gt;毫米 mm 换算比较方便的，英制对公制&lt;/li&gt;
  &lt;li&gt;点 pt 一个标准印刷单位，一英寸是72点，&lt;/li&gt;
  &lt;li&gt;派卡 pc Pica也是一个印刷术语，1pc等于12pt&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;相对长度单位&lt;/strong&gt;；根据事物之间的相关关系来度量，有三种相对长度单位，em，ex，px，前两个是em-height，x-height，常用的印刷度量单位，px表示像素，根设备的分辨率有关&lt;/p&gt;

&lt;h4 id=&quot;url&quot;&gt;URL&lt;/h4&gt;

&lt;p&gt;分成绝对路径和相对路径，绝对路径是指向web空间内的某个资源，相对路径是向着自己这边的资源，自己站内的资源&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;关键字&lt;/h4&gt;

&lt;p&gt;有时候一个值需要使用某个词来描述，这个词就是称为关键字，比如none。使用取出文档中链接的下划线&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a:link a;visited {text-decorated: none;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果一个属性接受关键字，那么只是针对这个属性的作用域定义的，两个属性都是用同一个词座位关键字，两个词的意义是不同的，letter-spacing定义的normal和font-style的normal就是不一样的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;inherit&lt;/strong&gt;；这个关键字是所有属性都有的，表示这个值和父元素的值相同&lt;/p&gt;

&lt;h4 id=&quot;css2&quot;&gt;CSS2单位&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;角度值 给定的声音从哪一个位置发出&lt;/li&gt;
  &lt;li&gt;时间值 语音元素之间的延迟，可以表示毫秒，ms，秒，s&lt;/li&gt;
  &lt;li&gt;频率值 用于为语音浏览器可以产生的声音声明一个给定频率&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-6&quot;&gt;小结&lt;/h4&gt;

&lt;p&gt;各种单位都有自己合适的应用场景，背景就是css属性的应用&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;5 字体&lt;/h3&gt;

&lt;p&gt;字体选择是一个常见并且重要的属性，设置字体属性是样式表的最常见用途之一；要是别人的机器上没有安装css想要的字体，那么显示效果就会大不相同&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;字体系列&lt;/h4&gt;

&lt;p&gt;一个字体，实际上是由不同的字体风格组成的字体家族，font-family，不如Times字体包括了TimesRegular，TimesBold等font face，尽管这些字体看上去就是一个字体&lt;/p&gt;

&lt;p&gt;除了各种特定字体，Times，Verdana，Helvetica，Arial之外，css还定义了5种通用字体&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Serif 有衬线字体&lt;/li&gt;
  &lt;li&gt;Sans-serif 无衬线字体&lt;/li&gt;
  &lt;li&gt;Monospace 等宽字体&lt;/li&gt;
  &lt;li&gt;Cursive 手写字体&lt;/li&gt;
  &lt;li&gt;Fantasy 其他无法归类的字体&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;使用通用字体系列&lt;/strong&gt;；font-family，如果希望使用一种sans-serif字体，但是并不关心是什么具体的字体&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;body {font-family: sans-serif;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;指定字体系列&lt;/strong&gt;；还是使用font-family，只是指定特定的字体&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;h1 {font-family: Georgia;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;font-family可以指定一个逗号分隔的字体列表，将通用字体放在列表的最后作为保底的选择&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;h1 {font-family: Arial, sans-serif;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;使用引号&lt;/strong&gt;；如果字体的名字由多个单词组成，中间有空格，那就需要使用单引号包裹,还有名字中有井号，美元符号等情况&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p {font-family: 'New Century Schoolbook';}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8d6a2535jw1f98yh48zhuj20l7083gmo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;字体加粗&lt;/h4&gt;

&lt;p&gt;css允许对字体加粗有许多的控制，粗体文本就是加粗的例子&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8d6a2535jw1f98yj4d5d5j20l808s0u3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;简单加粗，使用关键字来表示加粗的值&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;b {font-weight: bold;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-10&quot;&gt;字体大小&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535jw1f98yobmllgj20l909y3zs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-11&quot;&gt;字体风格&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8d6a2535jw1f98yqz1zqnj20l707x0tn.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-12&quot;&gt;字体变形&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8d6a2535jw1f98yrwwcwcj20lc07et9j.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-13&quot;&gt;拉伸和调整字体&lt;/h4&gt;

&lt;p&gt;font-stretch 和 font-size-adjust 这两个属性浏览器从么有实现&lt;/p&gt;

&lt;h4 id=&quot;font-&quot;&gt;font 属性&lt;/h4&gt;

&lt;p&gt;font属性可以有各个属性的任何值，进行统一的设置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;h1 {font: italic 900 small-caps 30px Verdana, Helvetica, Arial, sans-serif;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535jw1f9a80kuv2jj20l70al40d.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;一般文档里面都不会指定特殊的字体，不过可以设定通用的字体系列&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/css/2016/10/30/CSSDefinitiveGuide-B.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/css/2016/10/30/CSSDefinitiveGuide-B.html</guid>
        
        <category>CSS</category>
        
        <category>读书笔记</category>
        
        
        <category>CSS</category>
        
      </item>
    
      <item>
        <title>抽象数据类型基础</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#abstract-data-type&quot; id=&quot;markdown-toc-abstract-data-type&quot;&gt;抽象数据类型 Abstract Data Type&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;接口和实现分离&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;常见的抽象数据类型&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#stack&quot; id=&quot;markdown-toc-stack&quot;&gt;堆栈 Stack&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;关联数组&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;多重关联数组&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;复数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;容器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;双端队列&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;列表 序列&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;优先队列&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#queue&quot; id=&quot;markdown-toc-queue&quot;&gt;队列 queue&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;集合&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;字符串&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;树&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;抽象数据类型ADT是什么&lt;/p&gt;

&lt;p&gt;有哪些基本的抽象数据类型&lt;/p&gt;

&lt;h3 id=&quot;abstract-data-type&quot;&gt;抽象数据类型 Abstract Data Type&lt;/h3&gt;

&lt;p&gt;抽象数据类型（Abstract Data Type，ADT）是计算机科学是具有类似行为的特定类别的数据结构的数学模型；或者具有类似语义的一种或多种程序设计语言的数据类型。抽象数据类型是间接定义的，通过其上的可执行的操作以及这些操作的效果的数学约束（与可能的代价）。&lt;/p&gt;

&lt;p&gt;ADT首先是一种模型，数学，逻辑模型，具有特定语义的数据类型，附带的一些可执行的操作和操作效果的约束&lt;/p&gt;

&lt;p&gt;举例来说，堆栈 Stack&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;抽象的堆栈（stack）由3个操作定义：推入push，弹出pop，查看堆栈顶端数据peek&lt;/li&gt;
  &lt;li&gt;操作的约束，每次pop返回的是最新被push而且没有被push的数据，也就是先进后出&lt;/li&gt;
  &lt;li&gt;使用这种模型的效率计算，需要假设每一个操作使用时间资源相同，使用的空间资源是可以接受的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;抽象数据类型（ADT）是纯粹理论实体，用于简化描述抽象算法，分类与评价数据结构&lt;/p&gt;

&lt;p&gt;ADT常实现为模块（module）：模块的接口声明了对应于ADT操作的例程（procedure），有时用注释描述了约束。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;接口和实现分离&lt;/h4&gt;

&lt;p&gt;接口的意义在于指向用户暴露可用部分，而隐藏了实现，为将来程序实现的变化带来的冲击做准备&lt;/p&gt;

&lt;p&gt;抽象数据类型的强处在于对用户隐藏了实现细节，仅公开其接口。这表示抽象数据类型可以用各种方法来实现，只要遵循其接口，就不会影响到用户。&lt;/p&gt;

&lt;p&gt;在抽象数据类型和数据结构之间，有一个实现上的微妙差别。例如，列表的抽象数据类型可以数组为基础、或者使用链表来实现。列表即是一种具良好运算（加入元素、移除元素等等）定义的抽象数据类型。链表是以指针为基础的数据结构，且可用来创建一个列表。链表常用于列表的抽象数据类型。&lt;/p&gt;

&lt;p&gt;同样地，二叉树搜索法的抽象数据结构可以几个方式实现：二叉树、AVL树、红黑树、数组等等。且无须关心其实现，二叉树搜索法总是有相同的运算（插入、移除、查找等等）。&lt;/p&gt;

&lt;p&gt;ADT就像是一类数据结构的接口描述，可以概括的描述这个数据结构有哪些接口，有什么操作约束和逻辑约束&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;常见的抽象数据类型&lt;/h3&gt;

&lt;p&gt;在编程语言或者教科书中，存在一些常见的ADT&lt;/p&gt;

&lt;h4 id=&quot;stack&quot;&gt;堆栈 Stack&lt;/h4&gt;

&lt;p&gt;一种特殊的串列形式的数据结构，它的特殊之处在于只能允许在链接串列或阵列的一端（称为堆叠顶端指标，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。另外栈也可以用一维数组或连结串列的形式来完成。堆叠的另外一个相对的操作方式称为伫列。&lt;/p&gt;

&lt;p&gt;由于堆叠数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;关联数组&lt;/h4&gt;

&lt;p&gt;关联数组，Associative Array，又称作映射，Map，字典，Dictionary，是一个ADT，包含有类似键值这样的有序对，这些有序对可以重复也可以不重复&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;常见操作&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;向关联数组添加配对&lt;/li&gt;
  &lt;li&gt;从关联数组内删除配对&lt;/li&gt;
  &lt;li&gt;修改关联数组内的配对&lt;/li&gt;
  &lt;li&gt;根据已知的键寻找配对&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般是使用散列表，哈希表实现，也有用二叉查找树实现的&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;多重关联数组&lt;/h4&gt;

&lt;p&gt;多重关连数组，multimap，是一种抽象数据结构，它存储著(键，值)的有序对，和map不同之处在于，多重关连数组的有序对可以重复。通常，多重关连数组是利用在map中使用串列或集合当作值的字段。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;操作方式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;向关系数组添加配对&lt;/li&gt;
  &lt;li&gt;从关系数组内删除配对&lt;/li&gt;
  &lt;li&gt;修改关系数组内的配对&lt;/li&gt;
  &lt;li&gt;根据已知的键查找配对&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-4&quot;&gt;复数&lt;/h4&gt;

&lt;p&gt;与实数对应的复数，有实部和虚部&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;容器&lt;/h4&gt;

&lt;p&gt;容器是指实例为其他类的对象的集合的类、数据结构、或者抽象数据类型。提供特定的访问规则来访问对象&lt;/p&gt;

&lt;p&gt;可以从三个角度方式来看待容器&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;访问方式：访问容器中对象的方式，数组中，就是索引访问，堆栈中遵循先入后出的顺序，队列中就是先进先出&lt;/li&gt;
  &lt;li&gt;存储方式：容器如何存储对象的方式&lt;/li&gt;
  &lt;li&gt;遍历方式：如何遍历容器中对象的方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;容器类应当事先的方法（操纵方式）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建一个新的空容器，也就是构造方法&lt;/li&gt;
  &lt;li&gt;向容器中插入对象&lt;/li&gt;
  &lt;li&gt;从容器中删除对象&lt;/li&gt;
  &lt;li&gt;删除容器中的所有对象，清空&lt;/li&gt;
  &lt;li&gt;访问容器中的对象&lt;/li&gt;
  &lt;li&gt;获取容器中对象的数目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;容器有时候会结合&lt;strong&gt;迭代器&lt;/strong&gt;实现&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;容器的分类&lt;/strong&gt;；按照存储方式分类&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基于值的容器：存储对象的副本&lt;/li&gt;
  &lt;li&gt;基于引用的容器：存储指针或者对象的引用&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-6&quot;&gt;双端队列&lt;/h4&gt;
&lt;p&gt;双端队列，double ended queue ， deque，是同时具有队列和堆栈性质的数据结构，双端队列中的元素可以从两端弹出，插入和删除操作限定在队列的两端进行&lt;/p&gt;

&lt;p&gt;就是一个两头的栈，两边都可以push，pop，peek&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;列表 序列&lt;/h4&gt;

&lt;p&gt;一种有限的有序值的集合，其中每个值可以出现多次，列表的一个实例是在计算机中用来表现出数学上有限序列的概念；列表的无限类似是流。列表是容器的一个基本例子，因为它们包含其他值。在列表中的每个值(value)，称为项目（item）、条目（entry）或元素（element）；如果相同的值出现多次，每一次出现都认为是分立的一个项目。列表和数组区别在列表只允许顺序访问，而数组允许随机访问。&lt;/p&gt;

&lt;p&gt;数据结构中出现的典型概念就是链表&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;操作方式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个生成空列表的构造函数&lt;/li&gt;
  &lt;li&gt;用于测试列表是否为空&lt;/li&gt;
  &lt;li&gt;向列表前端加入元素&lt;/li&gt;
  &lt;li&gt;向列表末端入元素&lt;/li&gt;
  &lt;li&gt;确定列表头元素&lt;/li&gt;
  &lt;li&gt;用于引用除首项外所有部分的列表（这被称为列表的“尾部”）&lt;/li&gt;
  &lt;li&gt;销毁列表析构函数&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-8&quot;&gt;优先队列&lt;/h4&gt;

&lt;p&gt;优先队列是计算机科学中的一类抽象数据类型。优先队列中的每个元素都有各自的优先级，优先级最高的元素最先得到服务；优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列往往用堆来实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;操作方式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;插入带优先级的元素（insert_with_priority）&lt;/li&gt;
  &lt;li&gt;取出具有最高优先级的元素（pull_highest_priority_element）&lt;/li&gt;
  &lt;li&gt;查看最高优先级的元素（peek）：O(1)时间复杂度。其它可选的操作：&lt;/li&gt;
  &lt;li&gt;检查优先级高的一批元素&lt;/li&gt;
  &lt;li&gt;清空优先队列&lt;/li&gt;
  &lt;li&gt;批插入一批元素&lt;/li&gt;
  &lt;li&gt;合并多个优先队列&lt;/li&gt;
  &lt;li&gt;调整一个元素的优先级&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;queue&quot;&gt;队列 queue&lt;/h4&gt;

&lt;p&gt;队列，又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。&lt;/p&gt;

&lt;p&gt;队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;集合&lt;/h4&gt;

&lt;p&gt;可变数量的数据项的组合，这些数据项可能需要共享特征，需要使用一种方式来共同操作&lt;/p&gt;

&lt;p&gt;集合的种类包括列表，集，多重集，树和图。枚举类型可以是列表或集。&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;字符串&lt;/h4&gt;

&lt;p&gt;零个或者多个字符组成的有限序列&lt;/p&gt;

&lt;p&gt;通常以串的整体作为操作对象，如：在串中查找某个子串、求取一个子串、在串的某个位置上插入一个子串以及删除一个子串等。两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等。设p、q是两个串，求q在p中首次出现的位置的运算叫做模式匹配。串的两种最基本的存储方式是顺序存储方式和链接存储方式。&lt;/p&gt;

&lt;h4 id=&quot;section-11&quot;&gt;树&lt;/h4&gt;

&lt;p&gt;树（英语：tree）是一种抽象数据类型（ADT）或是实作这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。&lt;/p&gt;

&lt;p&gt;由n（n&amp;gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个节点有零个或多个子节点；&lt;/li&gt;
  &lt;li&gt;没有父节点的节点称为根节点；&lt;/li&gt;
  &lt;li&gt;每一个非根节点有且只有一个父节点；&lt;/li&gt;
  &lt;li&gt;除了根节点外，每个子节点可以分为多个不相交的子树；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-12&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;数据结构和抽象数据类型是两个概念，一个更具体一些，一个更加抽象和概念化，虽然看上去的意思是差不多的，都实在讨论数据的组织方式，本质上的偏向还是有区别&lt;/p&gt;

&lt;p&gt;数据结构用于具体的编码指导，更加贴近语言实现，ADT更加概念化，提出的是接口和操作方式，是一种方便概念化的模型，更加偏向学术讨论，方便概念明晰&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2016/10/30/AbstractDataTypeBasic.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2016/10/30/AbstractDataTypeBasic.html</guid>
        
        <category>数据结构</category>
        
        <category>算法</category>
        
        
        <category>算法与数据结构</category>
        
      </item>
    
      <item>
        <title>JavaScript权威指南 读书笔记-J</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#css&quot; id=&quot;markdown-toc-css&quot;&gt;16 脚本化CSS&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#css-1&quot; id=&quot;markdown-toc-css-1&quot;&gt;16.1 CSS概览&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;16.1.1 层叠&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#css-2&quot; id=&quot;markdown-toc-css-2&quot;&gt;16.1.2 CSS历史&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;16.1.3 复合属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;16.1.4 非标准属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#css-3&quot; id=&quot;markdown-toc-css-3&quot;&gt;16.1.5 CSS举例&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#css-4&quot; id=&quot;markdown-toc-css-4&quot;&gt;前沿的CSS&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#css-5&quot; id=&quot;markdown-toc-css-5&quot;&gt;16.2 重要的css属性&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#css-6&quot; id=&quot;markdown-toc-css-6&quot;&gt;16.2.1 用CSS定位元素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;16.2.2 边框，外边距和内边距&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#css-7&quot; id=&quot;markdown-toc-css-7&quot;&gt;16.2.3 CSS盒模型和定位细节&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;16.2.4 元素显示和可见性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;16.2.5 颜色，透明度和半透明度&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#overflowclip&quot; id=&quot;markdown-toc-overflowclip&quot;&gt;16.2.6 部分可见：overflow和clip&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;16.2.7 示例：重叠半透明窗口&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;16.3 脚本化内联样式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;16.4 查询计算出的样式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#css-8&quot; id=&quot;markdown-toc-css-8&quot;&gt;16.5 脚本化CSS类&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;16.6 脚本化样式表&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;16.6.1 开启和关闭样式表&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;16.6.2 查询，插入与删除样式表规则&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;16.6.3 创建新样式表&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全书的第二编：客户端JavaScript&lt;/p&gt;

&lt;p&gt;第16章：脚本化CSS&lt;/p&gt;

&lt;h3 id=&quot;css&quot;&gt;16 脚本化CSS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;js控制css可以制作酷炫的动画效果&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;css本身就是很复杂的，了解基础之后进入js控制&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主要内容有，css的基础，关键样式，怎么实现css脚本化，最常用和最重要的技术，利用sty属性，更改在webapp中的样式应用，查询元素的计算样式，开启关闭样式表，修改已经存在的样式表，添加新的样式表&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;css-1&quot;&gt;16.1 CSS概览&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;样式属性，指定字体，颜色，外边距，边框，北京图片，对其方式，元素尺寸和位置，定义HTML元素的视觉表现&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;16.1.1 层叠&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;css中的c表示的是cascading，层叠，意思就是来源于各处的样式，最终效果是层叠的，这些来源可能有，浏览器的默认样式表，文档本身的样式表和元素的内敛样式&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;css-2&quot;&gt;16.1.2 CSS历史&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;css 有css1标准1996年，css2标准1998年，css2.1，css3正在工作中&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-1&quot;&gt;16.1.3 复合属性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;css 声明属性的值，可以使用词列表的方式，但是貌似要注意顺序&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;font: bold italic 24pt helvetica;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;最明显的就是盒模型的几个属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-2&quot;&gt;16.1.4 非标准属性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;非标准的属性，厂商一般会在前面加一个厂商前缀，FF使用-moz-，chrome使用-webkit-，IE使用-ms-&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;css-3&quot;&gt;16.1.5 CSS举例&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;一个小例子，说明怎么使用css，包括样式的引用方式，选择器的使用等等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8d6a2535gw1f95hg37qxnj20jp0d7n0z.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;head&amp;gt;
&amp;lt;style type=&quot;text/css&quot;&amp;gt;
h1,h2 { 
	color: blue;
	font-style: italic;
}

.warning {
	font-weight: bold;
	font-size: 150%;
	margin: 0 1in 0 1in;
	background-color: yellow;
	border: solid red 8px;
	padding: 10px;
} 

.warning h1, .warning h2 {text-align: center;}

#special {
	text-align: center;
	text-transform: uppercase;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Cascading Style Sheets Demo&amp;lt;/h1&amp;gt;

&amp;lt;div class=&quot;warning&quot;&amp;gt;

&amp;lt;h2&amp;gt;Warning&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;p id=&quot;special&quot;&amp;gt;
&amp;lt;span style=&quot;text-transform: none;&quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;css-4&quot;&gt;前沿的CSS&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;正在添加一些功能演示属性，border-radius，text-shadow， box-shadow，column-count&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;web字体，利用css的@font-face规则可以下载使用自定义字体&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;css过度，自动将css演示转换成平滑的动画过度，现在是css草案&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;css变换，对于任何元素应用任意的2d仿射变换&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;css-5&quot;&gt;16.2 重要的css属性&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可以控制每个元素外观，位置，尺寸的属性，肯定是首当其冲的属性，还有其他的css属性指定，堆叠次序，透明度，裁剪区域，外边距，内边距，边框和颜色。理解这些样式属性的工作原理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8d6a2535gw1f95hy97tqwj20lp0fltbb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;css-6&quot;&gt;16.2.1 用CSS定位元素&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;position属性指定应用到元素上的定位类型，有4个可能值&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;static 默认，按照常规的内容流向，从上到下，从左到右进行定位，静态的定位不能使用top，left和类似属性&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;absolute，相对于他包含的元素进行定位，绝对定位的元素是独立定位的，不是静态定位的元素中文档流的一部分，要么是相对于最近的定位祖先元素，要么是相对于文档本身&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;fixed，相对于浏览器窗口进行定位，不会随着其他元素滚动&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;relative，按照常规的文档流布局，相对于文档流中的位置进行调整&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4种定位方式可以在文档中指定元素的定位位置，和与其他元素，浏览器的的定位方式&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;定位的标准单位，一般是使用像素px，也有其他的&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;英寸单位， in&lt;/li&gt;
      &lt;li&gt;厘米，cm&lt;/li&gt;
      &lt;li&gt;点， pt&lt;/li&gt;
      &lt;li&gt;字体行高， em&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;也可以使用百分比指定容器元素的百分比&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div style=&quot;position: absolute; left: 25%; top: 25%; width: 50%; height: 50%; border: 2px solid black;&quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;第三个维度：z-index，可以指定元素的堆叠次序，z-index默认是0，可以是正负整数&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;兄弟元素之间才有重叠的概念，如果不是两兄弟元素之间的重叠z-index也没啥用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CSS定位示例：文本阴影，css3有一个属性在文本下产生阴影效果text-shadow&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-3&quot;&gt;16.2.2 边框，外边距和内边距&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;边框和边距，border，margin，padding的设置&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;css-7&quot;&gt;16.2.3 CSS盒模型和定位细节&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;绝对定位的话，外边距没有任何意义&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8d6a2535gw1f95mb19441j20ls0dfabs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-4&quot;&gt;16.2.4 元素显示和可见性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;两个属性，visibility和display&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-5&quot;&gt;16.2.5 颜色，透明度和半透明度&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;属性color指定文档元素包含的文本的颜色，background-color指定任何元素的背景颜色&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;颜色表示，可以使用英文表示，也可以使用RGB色号&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;透明度，opacity，或者color是transparent&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;overflowclip&quot;&gt;16.2.6 部分可见：overflow和clip&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;overflow指定内容超出元素指定大小的时候怎么办&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;visible，溢出部分正常显示&lt;/li&gt;
      &lt;li&gt;hidden，裁剪隐藏掉超出的内容&lt;/li&gt;
      &lt;li&gt;scroll，显示水平和垂直的滚动条&lt;/li&gt;
      &lt;li&gt;auto，只有在溢出的时候才显示滚动条&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;clip指定的是元素的裁剪区域&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-6&quot;&gt;16.2.7 示例：重叠半透明窗口&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;在网页里面做出像操作系统窗口重叠的样子，体现css的强大&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-7&quot;&gt;16.3 脚本化内联样式&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;内联样式的元素的style属性，所以也是可以js脚本化的，但是style的值不是字符串，而是一个CSSStyleDeclaration对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;可以使用js访问元素的style对象
、&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CSS动画&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;使用js的函数来实现抖动或者淡出的效果，视觉上实现动画&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-8&quot;&gt;16.4 查询计算出的样式&lt;/h4&gt;

&lt;p&gt;最后计算出的样式是一个CSSStyleDecalration对象，最后的渲染效果就是这个对象来确定&lt;/p&gt;

&lt;p&gt;可以使用window对象的getComputedStyle方法来使获得一个元素的计算样式，第一个参数是元素，第二个可以是伪对象，也可以是null&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var title = document.getElementById(&quot;sectiontitle&quot;);
var titlestyles = window.getComputedStyle(title, null);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;计算样式对象和内联样式对象的区别&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 计算样式的属性是制度的
- 计算样式的单位没有相对值，只有绝对的单位尺寸
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;暂时这个计算样式到底怎么用，有什么用意义不明&lt;/p&gt;

&lt;h4 id=&quot;css-8&quot;&gt;16.5 脚本化CSS类&lt;/h4&gt;

&lt;p&gt;改变样式的一个实现就是改变元素的class属性，这样子就会改变一系列的样式应用&lt;/p&gt;

&lt;p&gt;定义一个class选择的样式，突出效果，这样可以吸引用户的注意&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.attention {
	background-color: yellow;
	font-weight: bold;
	border: solid black 2px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为class是js的保留字，所以对象里面使用className来表示class属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function grabAttention(e) {e.className = &quot;attention&quot;;}
function releaseAttention(e) {e.className = &quot;&quot;;} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-9&quot;&gt;16.6 脚本化样式表&lt;/h4&gt;

&lt;p&gt;关系到两类需要使用的对象，第一类是元素对象，style元素和link元素，都会包含或者引用样式表；第二类的是CSSStyleSheet对象，表示作为css文档关联的样式表&lt;/p&gt;

&lt;h5 id=&quot;section-10&quot;&gt;16.6.1 开启和关闭样式表&lt;/h5&gt;

&lt;p&gt;最简单的脚本化技术也就是最便捷和最健壮的，上面的几个对象都有一个disable的属性，可以关闭忽略样式&lt;/p&gt;

&lt;h5 id=&quot;section-11&quot;&gt;16.6.2 查询，插入与删除样式表规则&lt;/h5&gt;

&lt;p&gt;CSSStyleSheet对象也定义了API来查询，插入和删除样式&lt;/p&gt;

&lt;p&gt;一般更好地做法是让样式保持静态，然后对className进行更改&lt;/p&gt;

&lt;h5 id=&quot;section-12&quot;&gt;16.6.3 创建新样式表&lt;/h5&gt;

&lt;p&gt;动态创建整个样式表并添加到文档中，是可以做到的&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/javascript/2016/10/27/JavaScriptDefineBook-J.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/javascript/2016/10/27/JavaScriptDefineBook-J.html</guid>
        
        <category>javascript</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>JavaScript权威指南 读书笔记-I</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#window&quot; id=&quot;markdown-toc-window&quot;&gt;14 Window对象&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;14.1 计时器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;14.2 浏览器定位和导航&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#url&quot; id=&quot;markdown-toc-url&quot;&gt;14.2.1 解析URL&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;14.2.2 载入新的文档&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;14.3 浏览历史&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;14.4 浏览器和屏幕信息&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#navigator&quot; id=&quot;markdown-toc-navigator&quot;&gt;14.4.1 Navigator对象&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#scren&quot; id=&quot;markdown-toc-scren&quot;&gt;14.4.2 Scren对象&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;14.5 对话框&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;14.6 错误处理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#window-1&quot; id=&quot;markdown-toc-window-1&quot;&gt;14.7 作为Window对象属性的文档元素&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;14.8 多窗口和窗体&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;14.8.1 打开和关闭窗口&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;14.8.2 窗体之间的关系&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#js&quot; id=&quot;markdown-toc-js&quot;&gt;14.8.3 交互窗口中的js&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;15 脚本化文档&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dom&quot; id=&quot;markdown-toc-dom&quot;&gt;15.1 DOM概览&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;15.2 选取文档元素&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;15.2.1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;15.2.2 通过名字选取元素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;15.2.3 通过标签名选取元素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#css&quot; id=&quot;markdown-toc-css&quot;&gt;15.2.4 通过CSS类选取元素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#css-1&quot; id=&quot;markdown-toc-css-1&quot;&gt;15.2.5 通过css选择器选取元素&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;15.3 文档结构和遍历&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;15.3.1 作为节点树的文档&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;15.3.2 作为元素树的文档&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-18&quot; id=&quot;markdown-toc-section-18&quot;&gt;15.4 属性&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#htmlelement&quot; id=&quot;markdown-toc-htmlelement&quot;&gt;15.4.1 HTML属性作为Element的属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#html&quot; id=&quot;markdown-toc-html&quot;&gt;15.4.2 获取和设置非标准HTML属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-19&quot; id=&quot;markdown-toc-section-19&quot;&gt;15.4.3 数据集属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#attr&quot; id=&quot;markdown-toc-attr&quot;&gt;15.4.4 作为Attr节点的属性&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-20&quot; id=&quot;markdown-toc-section-20&quot;&gt;15.5 元素的内容&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#html-1&quot; id=&quot;markdown-toc-html-1&quot;&gt;15.5.1 作为HTML的元素内容&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-21&quot; id=&quot;markdown-toc-section-21&quot;&gt;15.5.2 作为纯文本的元素内容&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#text&quot; id=&quot;markdown-toc-text&quot;&gt;15.5.3 作为Text节点的元素内容&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-22&quot; id=&quot;markdown-toc-section-22&quot;&gt;15.6 创建，插入和删除节点&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-23&quot; id=&quot;markdown-toc-section-23&quot;&gt;15.6.1 创建节点&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-24&quot; id=&quot;markdown-toc-section-24&quot;&gt;15.6.2 插入节点&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-25&quot; id=&quot;markdown-toc-section-25&quot;&gt;15.6.3 删除和替换节点&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#documentfragment&quot; id=&quot;markdown-toc-documentfragment&quot;&gt;15.6.4 使用DocumentFragment&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-26&quot; id=&quot;markdown-toc-section-26&quot;&gt;15.7 例子：生成目录表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-27&quot; id=&quot;markdown-toc-section-27&quot;&gt;15.8 文档和元素的几何形状和滚动&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-28&quot; id=&quot;markdown-toc-section-28&quot;&gt;15.8.1 文档坐标和视口坐标&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-29&quot; id=&quot;markdown-toc-section-29&quot;&gt;15.8.2 查询元素的几何尺寸&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-30&quot; id=&quot;markdown-toc-section-30&quot;&gt;15.8.3 判定元素在某点&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-31&quot; id=&quot;markdown-toc-section-31&quot;&gt;15.8.4 滚动&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-32&quot; id=&quot;markdown-toc-section-32&quot;&gt;15.8.5 关于元素尺寸，位置和溢出的更多信息&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#html-2&quot; id=&quot;markdown-toc-html-2&quot;&gt;15.9 HTML表单&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-33&quot; id=&quot;markdown-toc-section-33&quot;&gt;15.9.1 选取表单和表单元素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-34&quot; id=&quot;markdown-toc-section-34&quot;&gt;15.9.2 表单和元素的属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-35&quot; id=&quot;markdown-toc-section-35&quot;&gt;15.9.3 表单和元素的时间处理程序&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-36&quot; id=&quot;markdown-toc-section-36&quot;&gt;15.9.4 按钮&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-37&quot; id=&quot;markdown-toc-section-37&quot;&gt;15.9.5 开关按钮&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-38&quot; id=&quot;markdown-toc-section-38&quot;&gt;15.9.6 文本域&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-39&quot; id=&quot;markdown-toc-section-39&quot;&gt;15.9.7 选择框和选项元素&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-40&quot; id=&quot;markdown-toc-section-40&quot;&gt;15.10 其它文档特性&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#document&quot; id=&quot;markdown-toc-document&quot;&gt;15.10.1 Document的属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#documentwrite&quot; id=&quot;markdown-toc-documentwrite&quot;&gt;15.10.2 document.write()方法&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-41&quot; id=&quot;markdown-toc-section-41&quot;&gt;15.10.3 查询选取的文本&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-42&quot; id=&quot;markdown-toc-section-42&quot;&gt;15.10.4 可编辑的内容&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全书的第二编：客户端JavaScript&lt;/p&gt;

&lt;p&gt;第14章：Window对象&lt;/p&gt;

&lt;p&gt;第15章：脚本化文档&lt;/p&gt;

&lt;h3 id=&quot;window&quot;&gt;14 Window对象&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;js客户端的全局对象，Window对象有哪些属性和方法？有些什么api&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;14.1 计时器&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;setTimeout和setInterval用来注册指定时间之后单词或者重复调用的函数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;setTimeout会返回一个值，这个值可以传递给clearTimeout用于取消这个函数的运行&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535gw1f93hmg8ytfj20j40efwhi.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;14.2 浏览器定位和导航&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;window的属性localtion是Location对象，表示窗口当前的URL&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;url&quot;&gt;14.2.1 解析URL&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;location对象的属性有很多关于url的信息，可以使用来提取&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-2&quot;&gt;14.2.2 载入新的文档&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;最直接的就是改变loaction属性的值，或者使用assign方法&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location = &quot;http://www.baidu.com&quot;;
location.assign(&quot;http://www.baidu.com&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-3&quot;&gt;14.3 浏览历史&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;window对象的history属性，把窗口的浏览历史文档和文档状态列表的形式表示&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;back，forward方法表示前进和后退&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;history.back();
history.forward();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;go方法可以接受一个整数参数，表示前进和后退多少页&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;流行框架中一般都有历史管理的功能，比如jQuery的history插件&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-4&quot;&gt;14.4 浏览器和屏幕信息&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;脚本获取浏览器和所在的桌面信息，window对象的navigator和screen属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;navigator&quot;&gt;14.4.1 Navigator对象&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;navigator表示浏览器本身的信息等等&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;scren&quot;&gt;14.4.2 Scren对象&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;有关窗口显示的大小和可用的颜色数量的信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-5&quot;&gt;14.5 对话框&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;window对象提供3个方法来显示简单的对话框，alert显示消息并提示关闭，confirm要求点击确定还是取消，并返回布尔值，prompt等待用户输入字符串，并返回字符串&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更复杂的对话框，showModalDialog在浏览器中显示一个模态窗口&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8d6a2535gw1f93icpp1dgj20jv083wfs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;14.6 错误处理&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;window对象有onerror属性&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 在一个对话框中弹出错误消息，但是不超过3次

window.onerror = function(msg, url, line) {
	if (onerror.num++ &amp;lt; onerror.max) {
		alert(&quot;ERROR: &quot;+ msg+&quot;\n&quot; + url+&quot;:&quot;+line);
		return true;
	}
}

onerror.max = 3;
onerror.num = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;window-1&quot;&gt;14.7 作为Window对象属性的文档元素&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;id属性为元素命名，html文档中的id属性会成为可以被脚本访问的全局变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-7&quot;&gt;14.8 多窗口和窗体&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;多标签页，每一个标签页都是一个上下文，都有独立的window对象，相互之间互不干扰&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当一个窗口控制打卡另一个窗口的时候，就不是毫无联系了，可以互操作&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-8&quot;&gt;14.8.1 打开和关闭窗口&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;可以使用方法open打开一个新的空白窗口，close关闭&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;open的参数，1 地址，2 窗口名字，3 窗口大小和状态&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;open返回一个window对象，这直接操作那个刚才打开的窗口&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-9&quot;&gt;14.8.2 窗体之间的关系&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;新窗口的window对象中有opener属性，这样子两个窗口之间就可以互相引用，读取对方的属性或者调用对方的方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自己的窗口或者窗体引用是window或者self，可以使用parent属性引用上一层的窗口，顶级的窗口的parent是一个窗体，也就是浏览器本身，指向自己&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自己的子窗体，iframe可以使用元素方式引用&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;js&quot;&gt;14.8.3 交互窗口中的js&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;要是没有同源策略的限制，脚本就可以和其他窗口进行交互&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-10&quot;&gt;15 脚本化文档&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;客户端js使得静态的html成为了webapp，window对象有一个属性document来引用Document对象，表示窗口的内容&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;document是一个巨大的API中的核心对象，叫做文档对象模型，DocumentObjectModel，DOM，代表和操作文档的内容&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dom&quot;&gt;15.1 DOM概览&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先是HTML和XML的嵌套元素在DOM树对象中的表示&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每一个标签都是一个节点，也即是一个Node对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;html元素的节点是element节点，代表文本的是text节点，document，element，text都是node的子类&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-11&quot;&gt;15.2 选取文档元素&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;选取文档中元素的方法&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;id属性&lt;/li&gt;
      &lt;li&gt;name属性&lt;/li&gt;
      &lt;li&gt;标签名&lt;/li&gt;
      &lt;li&gt;css类&lt;/li&gt;
      &lt;li&gt;匹配指定的css选择器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-12&quot;&gt;15.2.1&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;id属性，在文档中是唯一的，document方法getElementById&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var sections1 = document.getElementById(&quot;section1&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-13&quot;&gt;15.2.2 通过名字选取元素&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;name属性只在少数元素中有效，比如iframe和img，而且name的值在文档中不是唯一的也可以&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-14&quot;&gt;15.2.3 通过标签名选取元素&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;document的方法getElementsByTagName返回一个NodeList对象&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var firstpara = document.getElementByTagName(&quot;p&quot;)[0];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;document有两个边界属性，body和head，代表两个元素，浏览器隐式创建&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;css&quot;&gt;15.2.4 通过CSS类选取元素&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;class属性是空格隔开的列表，document中的getElementsByClassName方法&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var warnings = document.getElementsByClassName(&quot;warning&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;css-1&quot;&gt;15.2.5 通过css选择器选取元素&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;使用css的选择器进行元素的定位，选择器本身就是描述文档中的若干或者多组元素，元素可以使用id，类或者标签名来描述&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#nav 		// id是nav的元素
div 		// 所有的div元素
.warning 	// 所有在class属性中包含了warning的元素
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;更一般的来讲，元素可以基于属性值来选取&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p[lang=&quot;fr&quot;] 	// 所有使用法语的段落， &amp;lt;p lang=&quot;fr&quot;&amp;gt;
*[name=&quot;X&quot;] 	// 所有包含name是x属性的元素
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;基本选择器的组合&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;span.fatal.error 			// class中包含fatal和error的所有span元素
span[lang=&quot;fr&quot;].warning 	// 所有使用法语并且class中包含warning的span元素
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;选择器可以指定文档的结构&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#log span 				// id等于log的元素的狗带元素中的所有span元素
#log&amp;gt;span 				// id等于log的元素的子元素中的所有span元素
body&amp;gt;h1:first-child 	// body的子元素中的第一个h1元素
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;选择器可以组合，来选取多个或者多组元素&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;div, #log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;document.all[]&lt;/p&gt;

    &lt;p&gt;表示文档中的元素，除了text节点，废弃&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-15&quot;&gt;15.3 文档结构和遍历&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;文档元素选取ok之后，有时候会需要相关部分，比如父亲，兄弟，子女等等，概念上文档就是一棵节点对象树&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-16&quot;&gt;15.3.1 作为节点树的文档&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;每一个节点都是一个Node对象，有一些重要的属性&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;parentNode，父节点&lt;/li&gt;
      &lt;li&gt;childNodes，子节点，NodeList对象&lt;/li&gt;
      &lt;li&gt;firstChild，lastChild，子节点中的首个和最后一个&lt;/li&gt;
      &lt;li&gt;nextSibling，previousSibling，前一个和后一个兄弟节点&lt;/li&gt;
      &lt;li&gt;nodeType，节点的类型&lt;/li&gt;
      &lt;li&gt;nodeValue，节点的文本&lt;/li&gt;
      &lt;li&gt;nodeName，元素的标签名字&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;document.childNodes[0].childNodes[1];
document.firstChild.firstChild.nextSibling
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;有点像xpath的做法和概念&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-17&quot;&gt;15.3.2 作为元素树的文档&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;主要矛盾是在文档中的元素上，而不是元素之间的文本时候，可以看做是Element对象树，忽略部分文档，Text和Comment节点&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-18&quot;&gt;15.4 属性&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;html元素是一个标签和一组属性组成的，比如a元素是一个超链接，有属性gref作为值表示目的地址，在元素HTMLElement对象的属性就是这些属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;htmlelement&quot;&gt;15.4.1 HTML属性作为Element的属性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;常用的属性都有预先的定义，比如id，lang和dir属性，还有img元素的src属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;html&quot;&gt;15.4.2 获取和设置非标准HTML属性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;有方法，getAttribute和setAttrubute来这顶非标准属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-19&quot;&gt;15.4.3 数据集属性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;给元素标签添加额外属性的方式，前缀data-的属性在H5中都是合法的&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span class=&quot;sparkline&quot; data-ymin=&quot;0&quot; data-ymax=&quot;10&quot;&amp;gt;
1 2 3 4 5 6 7 8 9 0
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;这些附加的属性不会对文档外观产生影响，dataset属性的引用遵循一定的规律&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Element对象上的属性dataset，这个对象的属性就是data-属性名，复合驼峰命名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data-jquery-test =&amp;gt; dataset.jqueryTest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;attr&quot;&gt;15.4.4 作为Attr节点的属性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;还有一个使用Element属性的方法，attributes属性，代表元素的所有属性&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;document.body.attributes[0] 			// body元素的第一个属性
document.body.attributes.bgcolor  		// body元素的bgcolor属性
document.body.attributes[&quot;ONLOAD&quot;] 	// body元素的onload属性
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-20&quot;&gt;15.5 元素的内容&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;元素的内容就是标签内的东西，可以理解成字符串，也可以理解成节点，或者纯文本&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;html-1&quot;&gt;15.5.1 作为HTML的元素内容&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;element的属性innerHTML会作为字符串标记返回元素内容&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;outerHTML返回的是包含标签的文本字符串&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-21&quot;&gt;15.5.2 作为纯文本的元素内容&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;在文档中插入纯文本，Node的textContent属性实现&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;text&quot;&gt;15.5.3 作为Text节点的元素内容&lt;/h5&gt;

&lt;h4 id=&quot;section-22&quot;&gt;15.6 创建，插入和删除节点&lt;/h4&gt;

&lt;h5 id=&quot;section-23&quot;&gt;15.6.1 创建节点&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;可以使用documnt的createElement被方法床底元素的标签名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;也有其他的工厂方法，createComment，createDocumentFragment，createElementNS&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-24&quot;&gt;15.6.2 插入节点&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;appendChild需要插入的节点上追加一个子节点&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;insertBefore和appendChild一样，接受连个参数，在节点前面插入&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-25&quot;&gt;15.6.3 删除和替换节点&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;removeChild方法，在父节点上调用来删除子节点&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;replaceChild方法，删除并且替换成另一个节点&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;documentfragment&quot;&gt;15.6.4 使用DocumentFragment&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;特殊的Node，作为其他节点的一个临时的容器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;会被看做一个整个树的片段，下面所有的子节点都会被同意操作，看做是一个节点&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-26&quot;&gt;15.7 例子：生成目录表&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;展示一些特性，文档脚本化的一些概念：元素选取，文档遍历，元素属性设置，innerHTML属性设置和在文档中创建和插入新节点等&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-27&quot;&gt;15.8 文档和元素的几何形状和滚动&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;文档看到的时候是一个视觉表现层，每个元素都有自己的尺寸和位置&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-28&quot;&gt;15.8.1 文档坐标和视口坐标&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;视口就是窗口的网页展示部分，不包括浏览器的边框部分&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;还没有滚动的情况下，文档的原点就是视口的远端，出现滚动的时候，就会有偏移量&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-29&quot;&gt;15.8.2 查询元素的几何尺寸&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;getBoundingClientRect方法获取在视口坐标中的位置&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;偏移量加上位置就可以计算出坐标和大小&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-30&quot;&gt;15.8.3 判定元素在某点&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;想知道在视口的指定位置上有什么元素？Document对象的elementFromPOint方法来判定&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实际应用上，将鼠标指针的坐标传递给他来判断鼠标在哪个元素上&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-31&quot;&gt;15.8.4 滚动&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;设置属性scrollLeft和scrollTop来让浏览器滚动，方法scrollTop接受一个文档坐标，作为滚动条的偏移量进行设置&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-32&quot;&gt;15.8.5 关于元素尺寸，位置和溢出的更多信息&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;老式的方式来讲，html的只读属性，offsetWidth和offsetHeight用css像素返回屏幕尺寸&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;html-2&quot;&gt;15.9 HTML表单&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;提交表单的标签十分古老，比js本身还要早&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;表单元素和表单元素API&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535gw1f94mr2wfbwj20ic04t74v.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8d6a2535gw1f94mrp6zzbj20h90i5415.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-33&quot;&gt;15.9.1 选取表单和表单元素&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;和其他元素一样选取方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-34&quot;&gt;15.9.2 表单和元素的属性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;在js之前，需要一个提交按钮来提交表单，js的form对象支持submit方法和reset方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-35&quot;&gt;15.9.3 表单和元素的时间处理程序&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;onsubmit和onreset回调&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-36&quot;&gt;15.9.4 按钮&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;视觉上按钮是让用户触发脚本的方式，onclick事件处理程序&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-37&quot;&gt;15.9.5 开关按钮&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;复选框和单选框都是开关按钮&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-38&quot;&gt;15.9.6 文本域&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;input标签用来用户输入文本，单行输入&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;textarea是多行输入&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-39&quot;&gt;15.9.7 选择框和选项元素&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;select元素一般是渲染成下拉菜单的形式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-40&quot;&gt;15.10 其它文档特性&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;15章是全书最重要的一章，Document对象的讲解&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;document&quot;&gt;15.10.1 Document的属性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;除了body，documentElement和forms，还有一些有趣的属性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cookie，dimain，lastModified，location，referrer，title，URL&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;documentwrite&quot;&gt;15.10.2 document.write()方法&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;早起的脚本化api，早dom之前就引入了&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-41&quot;&gt;15.10.3 查询选取的文本&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;查询用户在文档中选取了什么文本？选中了什么文本？&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-42&quot;&gt;15.10.4 可编辑的内容&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;html简单的编辑功能，博客评论页面之类的，嵌入一个富文本编辑器，包含样式排版之类的，类似word的东西，cms&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;抵用方式，1 设置任何标签的contenteditable属性，2 设置对应元素的jscontenteditable属性&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 24 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/javascript/2016/10/24/JavaScriptDefineBook-I.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/javascript/2016/10/24/JavaScriptDefineBook-I.html</guid>
        
        <category>javascript</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>JavaScript权威指南 读书笔记-H</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript&quot; id=&quot;markdown-toc-javascript&quot;&gt;第二部分 客户端JavaScript&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#webjavascript&quot; id=&quot;markdown-toc-webjavascript&quot;&gt;13 Web浏览器中的JavaScript&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#js&quot; id=&quot;markdown-toc-js&quot;&gt;13.1客户端js&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#webjavascript-1&quot; id=&quot;markdown-toc-webjavascript-1&quot;&gt;13.1.1 Web文档里的JavaScript&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#webjs&quot; id=&quot;markdown-toc-webjs&quot;&gt;13.1.2 Web应用里的js&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#htmljs&quot; id=&quot;markdown-toc-htmljs&quot;&gt;13.2 在html中嵌入js&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#script&quot; id=&quot;markdown-toc-script&quot;&gt;13.2.1 script元素&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;13.2.2 外部文件中的脚本&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;13.2.3 脚本类型&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#html&quot; id=&quot;markdown-toc-html&quot;&gt;13.2.4 HTML中的事件处理顺序&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#urljavascript&quot; id=&quot;markdown-toc-urljavascript&quot;&gt;13.2.5 URL中的JavaScript&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#js-1&quot; id=&quot;markdown-toc-js-1&quot;&gt;13.3 JS程序的运行&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;13.3.1 同步，异步和延迟的脚本&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#js-2&quot; id=&quot;markdown-toc-js-2&quot;&gt;13.3.2 事件驱动的JS&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#js-3&quot; id=&quot;markdown-toc-js-3&quot;&gt;13.3.3 客户端js线程模型&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#js-4&quot; id=&quot;markdown-toc-js-4&quot;&gt;13.3.4 js时间线&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;13.4 兼容性和互用性&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;13.4.1 处理兼容性问题的类库&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;13.4.2 分级浏览器支持&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;13.4.3 功能测试&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;13.4.4 怪异模式和标准模式&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;13.4.5 浏览器测试&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#internet-explorer&quot; id=&quot;markdown-toc-internet-explorer&quot;&gt;13.4.6 Internet Explorer里的条件注释&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;13.5 可访问性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;13.6 安全性&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#j&quot; id=&quot;markdown-toc-j&quot;&gt;13.6.1 j不能做什么&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;13.6.2 同源策略&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#activex&quot; id=&quot;markdown-toc-activex&quot;&gt;13.6.3 脚本化插件和ActiveX插件&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;13.6.4 跨站脚本&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;13.6.5 拒绝服务攻击&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;13.7 客户端框架&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全书的第二编：客户端JavaScript&lt;/p&gt;

&lt;p&gt;第13章：web浏览器中的js&lt;/p&gt;

&lt;h2 id=&quot;javascript&quot;&gt;第二部分 客户端JavaScript&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;主要讲JS在Web浏览器中是如何实现的，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;介绍大量的脚本宿主对象，可以表示浏览器窗口，DOM和内容等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;涵盖重要的web应用所需的网络编程API，本地存储和检索数据，画图等&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webjavascript&quot;&gt;13 Web浏览器中的JavaScript&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;俗称客户端js，提供一个可以运行js的上下文&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;js&quot;&gt;13.1客户端js&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;window对象所有特性和api的主要接入点，表示浏览器的一个窗口或者窗体，可以使用window来引用，window对象定义了一些属性，比如，只带Location的location属性，指定显示在窗口中的url，并允许脚本往窗口中载入新的url&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器中，window对象就是全局对象，位于作用域链的顶部，他的属性和方法实际上就是全局变量和全局函数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;document属性是Document对象，表示显示在窗口中的文档，可以用js操作文档中的元素&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var timestamp = document.getElemntById(&quot;timestamp&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;事件处理相关的属性，在脚本中保定毅格函数，函数会在时间发生的时候异步执行&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
var timestamp = document.getElementById(&quot;timestamp&quot;);
timestamp.appendChild(document.createTextNode(new Date().toString()));
timestamp.onclick = function() {this.innerHTML = new Date().toString();};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;window对象的onload处理程序，事件处理程序中，嵌套函数在客户端js中使用普遍&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;webjavascript-1&quot;&gt;13.1.1 Web文档里的JavaScript&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;js可以操作document对象和包含的element对象遍历和管理内容，可以操作css样式来更改显示，可以通过注册事件来定义行为。内容，呈现和行为的组合叫做动态html或者dhtml&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;web文档中js的用处，ja的铮铮角色是增强用户的浏览体验，使得信息的获取和传递更加容易。创建动画和视觉效果；表格分组；隐藏内容，逐渐展示&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;webjs&quot;&gt;13.1.2 Web应用里的js&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在web文档之上，web应用除了内容，呈现，操作api之外，还依赖web浏览器环境提供的更基础的服务&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器已经不仅仅是显示文档的角色了，绅士可以属是一个简易的操作系统，web应用就是用js访问高级服务的web页面&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;高级服务：XMLHttpRequest对象，用来发出请求，可以请求数据，不用重新载入页面，ajax技术&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;html5的新特性，有数据存储和图像api，地理位置，历史管理和后台线程等等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;webapp的本质就是js程序&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;htmljs&quot;&gt;13.2 在html中嵌入js&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;4种引入方式&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;内敛，在标签script之间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;外部链接，放在script标签的src属性引用地址&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;放在html事件处理程序中，由onclick这样的标签属性指定&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;放在url中，使用特殊的javascript协议&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;后两种已经很少使用了，内联脚本也用得少，有个概念是让js代码和html进行分离，不要写在一起&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;script&quot;&gt;13.2.1 script元素&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;嵌入在htm文件中的，放在标签里面的脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section&quot;&gt;13.2.2 外部文件中的脚本&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;src属性的用法&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;../../scripts/util.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-1&quot;&gt;13.2.3 脚本类型&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;除了js，还有vbscript，默认是js&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;html&quot;&gt;13.2.4 HTML中的事件处理顺序&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;先注册事件处理程序，为了之后的调用做准备&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;urljavascript&quot;&gt;13.2.5 URL中的JavaScript&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;之前说的协议限定javascript的方式来写入代码&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;javascript:new Date().toLocalTimeString();&quot;&amp;gt;Whta time is it?&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;js-1&quot;&gt;13.3 JS程序的运行&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;所有的js程序共用一个window对象，也是一个全局的环境&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;js程序执行的两个阶段，第一阶段，载入文档内容，执行script标签里的代码，文档载入完成后，第二阶段，异步执行事件驱动的代码，使用之前注册的函数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;事件驱动阶段的第一个时间是load事件，表示文档完全载入，可以操作&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-2&quot;&gt;13.3.1 同步，异步和延迟的脚本&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;浏览器渲染页面的时候，先把script标签的代码执行ok，所以是同步和阻塞的，script标签可以有，defer和async属性，来改变脚本的执行方式，&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script defer src=&quot;deferred.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script async src=&quot;async.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;defer和async表示，脚本不会对文档内容产生影响，可以在下载脚本的时候渲染和解析文档，defer使得脚本延迟执行，直到文档渲染完成；async会使得浏览器尽快执行脚本，而不用在下载脚本的时候阻塞文档解析&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;js-2&quot;&gt;13.3.2 事件驱动的JS&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;注册处理事件最简单的方法就是把函数赋值给目标对象的属性&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.onload = function() {...};
document.getElementById(&quot;button1&quot;.onclick = function() {...});
function handleResponse() {...}
request.onreadystatechange = handleResponse;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;约定：事件处理程序都是on开头的，后面跟着事件的名字&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当一个事件需要有多个监听注册的时候，可以添加一个监听器监听事件的发生&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;js-3&quot;&gt;13.3.3 客户端js线程模型&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;js语言核心不包含线程机制，客户端js依然严格单线程工作，也就说，在脚本运行的时候，用户交互要停止&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;H5有一个新的东西叫webworker，就是后台线程&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;js-4&quot;&gt;13.3.4 js时间线&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器创建document对象，开始解析页面&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;执行同步的脚本，下载脚本&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;遇到async的脚本的话，下载脚本的同时解析文档&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;文档解析完成，document.readyState变成interactive&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异步运行defer的脚本&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器document对象的时间DOMContentLoaded触发，程序从执行同步脚本阶段，转换到异步事件驱动阶段&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;文档解析完成，不过有些内容可能还在加载，如图片等，readyState变成complete，浏览器触发window对象的load事件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调用异步事件，异步响应用户输入等&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-3&quot;&gt;13.4 兼容性和互用性&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;有无数的OS的浏览器的版本，环境差异还是很大，大家都喜欢的js程序还是蛮有挑战的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;兼容性问题的分类，&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;演化，web标准的变更，看浏览器厂商是不是对应&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;未实现，不同的浏览器开发商对一个特性并没有统一的观点，有些没有大家都实现&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;bug，各个浏览器中的各种bug&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;section-4&quot;&gt;13.4.1 处理兼容性问题的类库&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;曲线救国的方式，别人实现的js类库来解决&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jQuery框架，重新定义客户端API并兼容所有的浏览器&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-5&quot;&gt;13.4.2 分级浏览器支持&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;yahoo提出的测试技术，A级C级X级，表示不同的可用性&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-6&quot;&gt;13.4.3 功能测试&lt;/h5&gt;

&lt;h5 id=&quot;section-7&quot;&gt;13.4.4 怪异模式和标准模式&lt;/h5&gt;

&lt;h5 id=&quot;section-8&quot;&gt;13.4.5 浏览器测试&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;客户端js中检测浏览器类型和版本的方法是使用navigator对象，确定当前浏览器厂商和版本的代码叫做浏览器嗅探器或者客户端嗅探器&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;internet-explorer&quot;&gt;13.4.6 Internet Explorer里的条件注释&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;跟C里面的条件编译很相似&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-9&quot;&gt;13.5 可访问性&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;残障人士的辅助技术&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;只用键盘，不用鼠标的解决方式&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-10&quot;&gt;13.6 安全性&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;很多api会被恶意利用&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;j&quot;&gt;13.6.1 j不能做什么&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;没有权限写入或者删除客户机上的任意文件或者列出任何目录，防止病毒&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;没有任何通用的网络能力&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;限制任意打开窗口，不能任意关闭其他窗口&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-11&quot;&gt;13.6.2 同源策略&lt;/h5&gt;

&lt;h5 id=&quot;activex&quot;&gt;13.6.3 脚本化插件和ActiveX插件&lt;/h5&gt;

&lt;h5 id=&quot;section-12&quot;&gt;13.6.4 跨站脚本&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;XSS，攻击者向目标站点注入HTML标签脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-13&quot;&gt;13.6.5 拒绝服务攻击&lt;/h5&gt;

&lt;h4 id=&quot;section-14&quot;&gt;13.7 客户端框架&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;封装底层的代码，开放高级API的框架，比如jQuery&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;框架：Prototype，Dojo，YUI，Closure，GWT，&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 24 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/javascript/2016/10/24/JavaScriptDefineBook-H.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/javascript/2016/10/24/JavaScriptDefineBook-H.html</guid>
        
        <category>javascript</category>
        
        <category>正则表达式</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>JavaScript权威指南 读书笔记-F</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;10 正则表达式和模式匹配&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;10.1 正则表达式的定义&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;10.1.1 直接量字符&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;10.1.2 字符类&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;10.1.3 重复&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;10.1.4 选择，分组和引用&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;10.1.6 修饰符&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#string&quot; id=&quot;markdown-toc-string&quot;&gt;10.2 用于模式匹配的String方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#regexp&quot; id=&quot;markdown-toc-regexp&quot;&gt;10.3 RegExp对象&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#regexp-1&quot; id=&quot;markdown-toc-regexp-1&quot;&gt;10.3.1 RegExp的属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#regexp-2&quot; id=&quot;markdown-toc-regexp-2&quot;&gt;10.3.2 RegExp的方法&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript&quot; id=&quot;markdown-toc-javascript&quot;&gt;11 JavaScript的子集和扩展&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#js&quot; id=&quot;markdown-toc-js&quot;&gt;11.1 JS的子集&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;11.1.1 精华&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;11.1.2 子集的安全性&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;11.2 常量和局部变量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;11.3 解构赋值&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;11.4 迭代&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#foreach&quot; id=&quot;markdown-toc-foreach&quot;&gt;11.4.1 foreach循环&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;11.4.2 迭代器&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;11.4.3 生成器&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;11.4.4 数组推导&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;11.4.5 生成器表达式&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;11.5 函数简写&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#catch&quot; id=&quot;markdown-toc-catch&quot;&gt;11.6 多catch从句&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#e4xecmascript-for-xml&quot; id=&quot;markdown-toc-e4xecmascript-for-xml&quot;&gt;11.7 E4X：ECMAScript for XML&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#js-1&quot; id=&quot;markdown-toc-js-1&quot;&gt;12 服务器端JS&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#rhinojava&quot; id=&quot;markdown-toc-rhinojava&quot;&gt;12.1 用Rhino脚本化Java&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#nodeio&quot; id=&quot;markdown-toc-nodeio&quot;&gt;12.2 用Node实现异步I/O&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全书的第一编：JavaScript语言核心&lt;/p&gt;

&lt;p&gt;第10章：正则表达式和模式匹配&lt;/p&gt;

&lt;p&gt;第11章：JavaScript的子集和扩展&lt;/p&gt;

&lt;p&gt;第12章：服务器端JavaScript&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;10 正则表达式和模式匹配&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;正则表达式， re，是一个描述字符模式的对象。JS的RegExp类表示正则表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;10.1 正则表达式的定义&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可以使用RegExp()构造函数创建，不过一般是使用特殊的直接量语法来创建，在一对斜杠之间的字符&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 对象创建
var pattern = new RegExp(&quot;s$&quot;);

// 直接量创建
var pattern = /s$/; 

// 用来匹配所有s结尾的字符串
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-2&quot;&gt;10.1.1 直接量字符&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;正则中所有的字母和数字都是按照字面意义进行匹配的，非数字字母使用转义字符表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8d6a2535gw1f938tol5xsj20kc0cgdhb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;正则中有特殊含义的字符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535gw1f938um1s6aj20ay017glf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;10.1.2 字符类&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;将直接量字符单独放进方括号内就组成了字符类，一个字符类可以匹配他所包含的任意字符&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[abc]/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;可以通过次方符号来表示字符类的非运算结果&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[^abc]/ //匹配的是abc之外的所有字符
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;可以使用连字符表示范围&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[a-zA-Z0-9]/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;某些字符类在郑泽中有特殊的转义字符表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535gw1f93acv2pjuj20fl0c0myw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-4&quot;&gt;10.1.3 重复&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;描述重复任意多位的数字，或者描述由三个字符和一个数字构成的字符串&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在正则模式之后跟随使用指定字符串重复的标记，某些比较常用的情况有特殊字符表示&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/8d6a2535gw1f93ashuuzej20ib080jsg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一些现实例子&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8d6a2535gw1f93at7s206j20eg02mglz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;贪婪与非贪婪的重复，模式会产生同一段字符串出现多个匹配的情况，，aaaaaaab，多个a以b结束，如何匹配就看怎么设置&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-5&quot;&gt;10.1.4 选择，分组和引用&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;多个选择项，可以匹配多项中的一个&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/ab|cd|ef/

// 可以匹配 ab，cd或者ef
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535gw1f93b15pjzfj20md07s76f.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8d6a2535gw1f93b2vdfjxj20lz08ggnn.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-6&quot;&gt;10.1.6 修饰符&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;这个是放在斜线之外的，高级匹配模式规则，出现在两条斜线之后&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/8d6a2535gw1f93bdgnfoej20m404t3zm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;string&quot;&gt;10.2 用于模式匹配的String方法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;String对象的一些执行正则，检索替换的方法，String支持4中使用正则的方法，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;search()，参数是一个正则，返回第一个预支匹配的子串的位置，如果没有就返回-1&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;JavaScript&quot;.search(/script/i); =&amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;replace() 替换，参数是一个正则和一个字符串，找到之后进行替换&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;match() 返回一个由匹配结果生成的数组&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;regexp&quot;&gt;10.3 RegExp对象&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;构造函数在代码动态创建正则的时候很有用&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;regexp-1&quot;&gt;10.3.1 RegExp的属性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;每一个正则对象都有5个属性，source是只读字符串，表示正则的文本，global是一个只读的布尔，说明这个正则是否有g修饰符，ignoreCase也是制度布尔，表示是否有修饰符i，布尔mutiline，类似最后一个lastIndex是一个可读写的整数，如果带有g修饰符，存储的就是下一次开始检索的位置&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;regexp-2&quot;&gt;10.3.2 RegExp的方法&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;exec test&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;javascript&quot;&gt;11 JavaScript的子集和扩展&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;子集的定义大部分是安全考虑&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Firefox使用一个机遇明教SpiderMonkey的js引擎，Mozilla开发的另一个基于Java的js引擎Rhino也支持大部分扩展特性&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;js&quot;&gt;11.1 JS的子集&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;大多数语言都有自己的子集，更安全之星不可信任的第三方代码&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-7&quot;&gt;11.1.1 精华&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;很多语言都有精华和鸡肋，只用精华，不用糟粕，可以升华每一个程序员的心灵&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不包含with，continue和eval哈数，提倡使用函数定义表达式，不是函数定义语句来定义函数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;循环和分值都用花括号包裹，不省略&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不推荐使用不严格等于，使用严格等于的比较&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-8&quot;&gt;11.1.2 子集的安全性&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;代码静态安全检查的沙箱，必须移除一些特性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;eval和function构造函数都禁止使用，因为可以执行任意代码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止使用this关键字，可以访问全局对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止with语句，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止某些全局变量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;禁止某些属性和方法，比如caller，callee&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;静态分析防止带有点运算符的属性存取方式去读写特殊属性&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-9&quot;&gt;11.2 常量和局部变量&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;下面是语言的扩展&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;const关键字来定义常量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;块级作用域的支持，关键字let，作用域只属于最近的代码块&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-10&quot;&gt;11.3 解构赋值&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;多个值同时复制给多个值&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let [x,y] = [1,2];
[x,y] = [x+1, y+1];
[x,y] = [y,x];
console.log([x,y]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-11&quot;&gt;11.4 迭代&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;foreach循环和python风格的迭代器和生成器&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;foreach&quot;&gt;11.4.1 foreach循环&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;不是遍历对象的属性，而是遍历属性的值&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-12&quot;&gt;11.4.2 迭代器&lt;/h5&gt;

&lt;h5 id=&quot;section-13&quot;&gt;11.4.3 生成器&lt;/h5&gt;

&lt;h5 id=&quot;section-14&quot;&gt;11.4.4 数组推导&lt;/h5&gt;

&lt;h5 id=&quot;section-15&quot;&gt;11.4.5 生成器表达式&lt;/h5&gt;

&lt;h4 id=&quot;section-16&quot;&gt;11.5 函数简写&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;表达式闭包，函数只计算的一个表达式并返回值的话没return和花括号都可以省略&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let succ = function(x)x+1, yes=function()true, no = function() false;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;catch&quot;&gt;11.6 多catch从句&lt;/h4&gt;

&lt;h4 id=&quot;e4xecmascript-for-xml&quot;&gt;11.7 E4X：ECMAScript for XML&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;js的标准扩展，为处理XML文档定义了一系列强大特性&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;js-1&quot;&gt;12 服务器端JS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;除了浏览器端，js也是一个通用的编程语言&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rhino是基于Java的js解析器，实现了通过js程序访问整个Java API&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Node是Google的V8 JS解析器的特别版本，底层绑定了POSIX API，包括文件，进程，流和套接字等等，侧重于异步I/O，网络和HTTP&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web浏览器之外，js的用武之地，服务器端，Rhino程序可以使用Java的Swing框架搭建UI，Node上的js程序可以向shell一样操作文件&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rhinojava&quot;&gt;12.1 用Rhino脚本化Java&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Rhino是Java编写的js解析器，目的是使用Java品台的API实现js编写程序。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;nodeio&quot;&gt;12.2 用Node实现异步I/O&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Node是基于C++的告诉JS解释器，绑定了Unix API&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 24 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://zhangzj.github.io/javascript/2016/10/24/JavaScriptDefineBook-G.html</link>
        <guid isPermaLink="true">http://zhangzj.github.io/javascript/2016/10/24/JavaScriptDefineBook-G.html</guid>
        
        <category>javascript</category>
        
        <category>正则表达式</category>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
